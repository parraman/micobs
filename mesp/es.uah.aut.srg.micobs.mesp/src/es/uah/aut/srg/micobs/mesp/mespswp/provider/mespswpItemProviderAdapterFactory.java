/*******************************************************************************
 * Copyright (c) 2013 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mesp.mespswp.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mesp.mespswp.util.mespswpAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mespswpItemProviderAdapterFactory extends mespswpAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mespswpItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackage} instances.
	 * @generated
	 */
	protected MSwPackageItemProvider mSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageAdapter() {
		if (mSwPackageItemProvider == null) {
			mSwPackageItemProvider = new MSwPackageItemProvider(this);
		}

		return mSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackage} instances.
	 * @generated
	 */
	protected MDriverSwPackageItemProvider mDriverSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSwPackageAdapter() {
		if (mDriverSwPackageItemProvider == null) {
			mDriverSwPackageItemProvider = new MDriverSwPackageItemProvider(this);
		}

		return mDriverSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterface} instances.
	 * @generated
	 */
	protected MSwPackageProvidedInterfaceItemProvider mSwPackageProvidedInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageProvidedInterfaceAdapter() {
		if (mSwPackageProvidedInterfaceItemProvider == null) {
			mSwPackageProvidedInterfaceItemProvider = new MSwPackageProvidedInterfaceItemProvider(this);
		}

		return mSwPackageProvidedInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVASwitch} instances.
	 * @generated
	 */
	protected MSwPackageProvidedInterfacePVASwitchItemProvider mSwPackageProvidedInterfacePVASwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVASwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageProvidedInterfacePVASwitchAdapter() {
		if (mSwPackageProvidedInterfacePVASwitchItemProvider == null) {
			mSwPackageProvidedInterfacePVASwitchItemProvider = new MSwPackageProvidedInterfacePVASwitchItemProvider(this);
		}

		return mSwPackageProvidedInterfacePVASwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVASwitchCase} instances.
	 * @generated
	 */
	protected MSwPackageProvidedInterfacePVASwitchCaseItemProvider mSwPackageProvidedInterfacePVASwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVASwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageProvidedInterfacePVASwitchCaseAdapter() {
		if (mSwPackageProvidedInterfacePVASwitchCaseItemProvider == null) {
			mSwPackageProvidedInterfacePVASwitchCaseItemProvider = new MSwPackageProvidedInterfacePVASwitchCaseItemProvider(this);
		}

		return mSwPackageProvidedInterfacePVASwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVAExpression} instances.
	 * @generated
	 */
	protected MSwPackageProvidedInterfacePVAExpressionItemProvider mSwPackageProvidedInterfacePVAExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageProvidedInterfacePVAExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageProvidedInterfacePVAExpressionAdapter() {
		if (mSwPackageProvidedInterfacePVAExpressionItemProvider == null) {
			mSwPackageProvidedInterfacePVAExpressionItemProvider = new MSwPackageProvidedInterfacePVAExpressionItemProvider(this);
		}

		return mSwPackageProvidedInterfacePVAExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageRequiredInterface} instances.
	 * @generated
	 */
	protected MSwPackageRequiredInterfaceItemProvider mSwPackageRequiredInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageRequiredInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageRequiredInterfaceAdapter() {
		if (mSwPackageRequiredInterfaceItemProvider == null) {
			mSwPackageRequiredInterfaceItemProvider = new MSwPackageRequiredInterfaceItemProvider(this);
		}

		return mSwPackageRequiredInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MAbstractSwPackage} instances.
	 * @generated
	 */
	protected MAbstractSwPackageItemProvider mAbstractSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MAbstractSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMAbstractSwPackageAdapter() {
		if (mAbstractSwPackageItemProvider == null) {
			mAbstractSwPackageItemProvider = new MAbstractSwPackageItemProvider(this);
		}

		return mAbstractSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageSupportedPlatform} instances.
	 * @generated
	 */
	protected MSwPackageSupportedPlatformItemProvider mSwPackageSupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MSwPackageSupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMSwPackageSupportedPlatformAdapter() {
		if (mSwPackageSupportedPlatformItemProvider == null) {
			mSwPackageSupportedPlatformItemProvider = new MSwPackageSupportedPlatformItemProvider(this);
		}

		return mSwPackageSupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackageSupportedPlatform} instances.
	 * @generated
	 */
	protected MDriverSwPackageSupportedPlatformItemProvider mDriverSwPackageSupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackageSupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSwPackageSupportedPlatformAdapter() {
		if (mDriverSwPackageSupportedPlatformItemProvider == null) {
			mDriverSwPackageSupportedPlatformItemProvider = new MDriverSwPackageSupportedPlatformItemProvider(this);
		}

		return mDriverSwPackageSupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackageSupportedDevice} instances.
	 * @generated
	 */
	protected MDriverSwPackageSupportedDeviceItemProvider mDriverSwPackageSupportedDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MDriverSwPackageSupportedDevice}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSwPackageSupportedDeviceAdapter() {
		if (mDriverSwPackageSupportedDeviceItemProvider == null) {
			mDriverSwPackageSupportedDeviceItemProvider = new MDriverSwPackageSupportedDeviceItemProvider(this);
		}

		return mDriverSwPackageSupportedDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MInstantiableResourceDemand} instances.
	 * @generated
	 */
	protected MInstantiableResourceDemandItemProvider mInstantiableResourceDemandItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MInstantiableResourceDemand}.
	 * @generated
	 */
	@Override
	public Adapter createMInstantiableResourceDemandAdapter() {
		if (mInstantiableResourceDemandItemProvider == null) {
			mInstantiableResourceDemandItemProvider = new MInstantiableResourceDemandItemProvider(this);
		}

		return mInstantiableResourceDemandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MQuantifiableResourceDemand} instances.
	 * @generated
	 */
	protected MQuantifiableResourceDemandItemProvider mQuantifiableResourceDemandItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MQuantifiableResourceDemand}.
	 * @generated
	 */
	@Override
	public Adapter createMQuantifiableResourceDemandAdapter() {
		if (mQuantifiableResourceDemandItemProvider == null) {
			mQuantifiableResourceDemandItemProvider = new MQuantifiableResourceDemandItemProvider(this);
		}

		return mQuantifiableResourceDemandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MMESPSWPPackageFile} instances.
	 * @generated
	 */
	protected MMESPSWPPackageFileItemProvider mmespswpPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MMESPSWPPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPSWPPackageFileAdapter() {
		if (mmespswpPackageFileItemProvider == null) {
			mmespswpPackageFileItemProvider = new MMESPSWPPackageFileItemProvider(this);
		}

		return mmespswpPackageFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MBooleanParamSWPSPSwitch} instances.
	 * @generated
	 */
	protected MBooleanParamSWPSPSwitchItemProvider mBooleanParamSWPSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MBooleanParamSWPSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamSWPSPSwitchAdapter() {
		if (mBooleanParamSWPSPSwitchItemProvider == null) {
			mBooleanParamSWPSPSwitchItemProvider = new MBooleanParamSWPSPSwitchItemProvider(this);
		}

		return mBooleanParamSWPSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MBooleanParamSWPSPSwitchCase} instances.
	 * @generated
	 */
	protected MBooleanParamSWPSPSwitchCaseItemProvider mBooleanParamSWPSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MBooleanParamSWPSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamSWPSPSwitchCaseAdapter() {
		if (mBooleanParamSWPSPSwitchCaseItemProvider == null) {
			mBooleanParamSWPSPSwitchCaseItemProvider = new MBooleanParamSWPSPSwitchCaseItemProvider(this);
		}

		return mBooleanParamSWPSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MStringParamSWPSPSwitch} instances.
	 * @generated
	 */
	protected MStringParamSWPSPSwitchItemProvider mStringParamSWPSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MStringParamSWPSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamSWPSPSwitchAdapter() {
		if (mStringParamSWPSPSwitchItemProvider == null) {
			mStringParamSWPSPSwitchItemProvider = new MStringParamSWPSPSwitchItemProvider(this);
		}

		return mStringParamSWPSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MStringParamSWPSPSwitchCase} instances.
	 * @generated
	 */
	protected MStringParamSWPSPSwitchCaseItemProvider mStringParamSWPSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MStringParamSWPSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamSWPSPSwitchCaseAdapter() {
		if (mStringParamSWPSPSwitchCaseItemProvider == null) {
			mStringParamSWPSPSwitchCaseItemProvider = new MStringParamSWPSPSwitchCaseItemProvider(this);
		}

		return mStringParamSWPSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MIntegerParamSWPSPSwitch} instances.
	 * @generated
	 */
	protected MIntegerParamSWPSPSwitchItemProvider mIntegerParamSWPSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MIntegerParamSWPSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamSWPSPSwitchAdapter() {
		if (mIntegerParamSWPSPSwitchItemProvider == null) {
			mIntegerParamSWPSPSwitchItemProvider = new MIntegerParamSWPSPSwitchItemProvider(this);
		}

		return mIntegerParamSWPSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MIntegerParamSWPSPSwitchCase} instances.
	 * @generated
	 */
	protected MIntegerParamSWPSPSwitchCaseItemProvider mIntegerParamSWPSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MIntegerParamSWPSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamSWPSPSwitchCaseAdapter() {
		if (mIntegerParamSWPSPSwitchCaseItemProvider == null) {
			mIntegerParamSWPSPSwitchCaseItemProvider = new MIntegerParamSWPSPSwitchCaseItemProvider(this);
		}

		return mIntegerParamSWPSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MEnumParamSWPSPSwitch} instances.
	 * @generated
	 */
	protected MEnumParamSWPSPSwitchItemProvider mEnumParamSWPSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MEnumParamSWPSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamSWPSPSwitchAdapter() {
		if (mEnumParamSWPSPSwitchItemProvider == null) {
			mEnumParamSWPSPSwitchItemProvider = new MEnumParamSWPSPSwitchItemProvider(this);
		}

		return mEnumParamSWPSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MEnumParamSWPSPSwitchCase} instances.
	 * @generated
	 */
	protected MEnumParamSWPSPSwitchCaseItemProvider mEnumParamSWPSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MEnumParamSWPSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamSWPSPSwitchCaseAdapter() {
		if (mEnumParamSWPSPSwitchCaseItemProvider == null) {
			mEnumParamSWPSPSwitchCaseItemProvider = new MEnumParamSWPSPSwitchCaseItemProvider(this);
		}

		return mEnumParamSWPSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MRealParamSWPSPSwitch} instances.
	 * @generated
	 */
	protected MRealParamSWPSPSwitchItemProvider mRealParamSWPSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MRealParamSWPSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamSWPSPSwitchAdapter() {
		if (mRealParamSWPSPSwitchItemProvider == null) {
			mRealParamSWPSPSwitchItemProvider = new MRealParamSWPSPSwitchItemProvider(this);
		}

		return mRealParamSWPSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespswp.MRealParamSWPSPSwitchCase} instances.
	 * @generated
	 */
	protected MRealParamSWPSPSwitchCaseItemProvider mRealParamSWPSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespswp.MRealParamSWPSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamSWPSPSwitchCaseAdapter() {
		if (mRealParamSWPSPSwitchCaseItemProvider == null) {
			mRealParamSWPSPSwitchCaseItemProvider = new MRealParamSWPSPSwitchCaseItemProvider(this);
		}

		return mRealParamSWPSPSwitchCaseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mSwPackageItemProvider != null) mSwPackageItemProvider.dispose();
		if (mDriverSwPackageItemProvider != null) mDriverSwPackageItemProvider.dispose();
		if (mSwPackageProvidedInterfaceItemProvider != null) mSwPackageProvidedInterfaceItemProvider.dispose();
		if (mSwPackageProvidedInterfacePVASwitchItemProvider != null) mSwPackageProvidedInterfacePVASwitchItemProvider.dispose();
		if (mSwPackageProvidedInterfacePVASwitchCaseItemProvider != null) mSwPackageProvidedInterfacePVASwitchCaseItemProvider.dispose();
		if (mSwPackageProvidedInterfacePVAExpressionItemProvider != null) mSwPackageProvidedInterfacePVAExpressionItemProvider.dispose();
		if (mSwPackageRequiredInterfaceItemProvider != null) mSwPackageRequiredInterfaceItemProvider.dispose();
		if (mAbstractSwPackageItemProvider != null) mAbstractSwPackageItemProvider.dispose();
		if (mSwPackageSupportedPlatformItemProvider != null) mSwPackageSupportedPlatformItemProvider.dispose();
		if (mDriverSwPackageSupportedPlatformItemProvider != null) mDriverSwPackageSupportedPlatformItemProvider.dispose();
		if (mDriverSwPackageSupportedDeviceItemProvider != null) mDriverSwPackageSupportedDeviceItemProvider.dispose();
		if (mInstantiableResourceDemandItemProvider != null) mInstantiableResourceDemandItemProvider.dispose();
		if (mQuantifiableResourceDemandItemProvider != null) mQuantifiableResourceDemandItemProvider.dispose();
		if (mmespswpPackageFileItemProvider != null) mmespswpPackageFileItemProvider.dispose();
		if (mBooleanParamSWPSPSwitchItemProvider != null) mBooleanParamSWPSPSwitchItemProvider.dispose();
		if (mBooleanParamSWPSPSwitchCaseItemProvider != null) mBooleanParamSWPSPSwitchCaseItemProvider.dispose();
		if (mStringParamSWPSPSwitchItemProvider != null) mStringParamSWPSPSwitchItemProvider.dispose();
		if (mStringParamSWPSPSwitchCaseItemProvider != null) mStringParamSWPSPSwitchCaseItemProvider.dispose();
		if (mIntegerParamSWPSPSwitchItemProvider != null) mIntegerParamSWPSPSwitchItemProvider.dispose();
		if (mIntegerParamSWPSPSwitchCaseItemProvider != null) mIntegerParamSWPSPSwitchCaseItemProvider.dispose();
		if (mEnumParamSWPSPSwitchItemProvider != null) mEnumParamSWPSPSwitchItemProvider.dispose();
		if (mEnumParamSWPSPSwitchCaseItemProvider != null) mEnumParamSWPSPSwitchCaseItemProvider.dispose();
		if (mRealParamSWPSPSwitchItemProvider != null) mRealParamSWPSPSwitchItemProvider.dispose();
		if (mRealParamSWPSPSwitchCaseItemProvider != null) mRealParamSWPSPSwitchCaseItemProvider.dispose();
	}

}
