/*******************************************************************************
 * Copyright (c) 2013 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mesp.library.mesplibrary.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mesp.library.mesplibrary.util.mesplibraryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mesplibraryItemProviderAdapterFactory extends mesplibraryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mesplibraryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPLibrary} instances.
	 * @generated
	 */
	protected MMESPLibraryItemProvider mmespLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPLibrary}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPLibraryAdapter() {
		if (mmespLibraryItemProvider == null) {
			mmespLibraryItemProvider = new MMESPLibraryItemProvider(this);
		}

		return mmespLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPPackage} instances.
	 * @generated
	 */
	protected MMESPPackageItemProvider mmespPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPPackageAdapter() {
		if (mmespPackageItemProvider == null) {
			mmespPackageItemProvider = new MMESPPackageItemProvider(this);
		}

		return mmespPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemSwPackage} instances.
	 * @generated
	 */
	protected MMESPItemSwPackageItemProvider mmespItemSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemSwPackageAdapter() {
		if (mmespItemSwPackageItemProvider == null) {
			mmespItemSwPackageItemProvider = new MMESPItemSwPackageItemProvider(this);
		}

		return mmespItemSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemSwPackage} instances.
	 * @generated
	 */
	protected MMESPVersionedItemSwPackageItemProvider mmespVersionedItemSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemSwPackageAdapter() {
		if (mmespVersionedItemSwPackageItemProvider == null) {
			mmespVersionedItemSwPackageItemProvider = new MMESPVersionedItemSwPackageItemProvider(this);
		}

		return mmespVersionedItemSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemSwInterface} instances.
	 * @generated
	 */
	protected MMESPItemSwInterfaceItemProvider mmespItemSwInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemSwInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemSwInterfaceAdapter() {
		if (mmespItemSwInterfaceItemProvider == null) {
			mmespItemSwInterfaceItemProvider = new MMESPItemSwInterfaceItemProvider(this);
		}

		return mmespItemSwInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemSwInterface} instances.
	 * @generated
	 */
	protected MMESPVersionedItemSwInterfaceItemProvider mmespVersionedItemSwInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemSwInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemSwInterfaceAdapter() {
		if (mmespVersionedItemSwInterfaceItemProvider == null) {
			mmespVersionedItemSwInterfaceItemProvider = new MMESPVersionedItemSwInterfaceItemProvider(this);
		}

		return mmespVersionedItemSwInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemOSSwPackage} instances.
	 * @generated
	 */
	protected MMESPItemOSSwPackageItemProvider mmespItemOSSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemOSSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemOSSwPackageAdapter() {
		if (mmespItemOSSwPackageItemProvider == null) {
			mmespItemOSSwPackageItemProvider = new MMESPItemOSSwPackageItemProvider(this);
		}

		return mmespItemOSSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemOSSwPackage} instances.
	 * @generated
	 */
	protected MMESPVersionedItemOSSwPackageItemProvider mmespVersionedItemOSSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemOSSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemOSSwPackageAdapter() {
		if (mmespVersionedItemOSSwPackageItemProvider == null) {
			mmespVersionedItemOSSwPackageItemProvider = new MMESPVersionedItemOSSwPackageItemProvider(this);
		}

		return mmespVersionedItemOSSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemOSSwInterface} instances.
	 * @generated
	 */
	protected MMESPItemOSSwInterfaceItemProvider mmespItemOSSwInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemOSSwInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemOSSwInterfaceAdapter() {
		if (mmespItemOSSwInterfaceItemProvider == null) {
			mmespItemOSSwInterfaceItemProvider = new MMESPItemOSSwInterfaceItemProvider(this);
		}

		return mmespItemOSSwInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemOSSwInterface} instances.
	 * @generated
	 */
	protected MMESPVersionedItemOSSwInterfaceItemProvider mmespVersionedItemOSSwInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemOSSwInterface}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemOSSwInterfaceAdapter() {
		if (mmespVersionedItemOSSwInterfaceItemProvider == null) {
			mmespVersionedItemOSSwInterfaceItemProvider = new MMESPVersionedItemOSSwInterfaceItemProvider(this);
		}

		return mmespVersionedItemOSSwInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemPlatformSwPackage} instances.
	 * @generated
	 */
	protected MMESPItemPlatformSwPackageItemProvider mmespItemPlatformSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemPlatformSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemPlatformSwPackageAdapter() {
		if (mmespItemPlatformSwPackageItemProvider == null) {
			mmespItemPlatformSwPackageItemProvider = new MMESPItemPlatformSwPackageItemProvider(this);
		}

		return mmespItemPlatformSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemPlatformSwPackage} instances.
	 * @generated
	 */
	protected MMESPVersionedItemPlatformSwPackageItemProvider mmespVersionedItemPlatformSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemPlatformSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemPlatformSwPackageAdapter() {
		if (mmespVersionedItemPlatformSwPackageItemProvider == null) {
			mmespVersionedItemPlatformSwPackageItemProvider = new MMESPVersionedItemPlatformSwPackageItemProvider(this);
		}

		return mmespVersionedItemPlatformSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemDeployment} instances.
	 * @generated
	 */
	protected MMESPItemDeploymentItemProvider mmespItemDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemDeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemDeploymentAdapter() {
		if (mmespItemDeploymentItemProvider == null) {
			mmespItemDeploymentItemProvider = new MMESPItemDeploymentItemProvider(this);
		}

		return mmespItemDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemDeployment} instances.
	 * @generated
	 */
	protected MMESPVersionedItemDeploymentItemProvider mmespVersionedItemDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemDeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemDeploymentAdapter() {
		if (mmespVersionedItemDeploymentItemProvider == null) {
			mmespVersionedItemDeploymentItemProvider = new MMESPVersionedItemDeploymentItemProvider(this);
		}

		return mmespVersionedItemDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemAbstractSwPackage} instances.
	 * @generated
	 */
	protected MMESPItemAbstractSwPackageItemProvider mmespItemAbstractSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemAbstractSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemAbstractSwPackageAdapter() {
		if (mmespItemAbstractSwPackageItemProvider == null) {
			mmespItemAbstractSwPackageItemProvider = new MMESPItemAbstractSwPackageItemProvider(this);
		}

		return mmespItemAbstractSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemAbstractSwPackage} instances.
	 * @generated
	 */
	protected MMESPVersionedItemAbstractSwPackageItemProvider mmespVersionedItemAbstractSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemAbstractSwPackage}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemAbstractSwPackageAdapter() {
		if (mmespVersionedItemAbstractSwPackageItemProvider == null) {
			mmespVersionedItemAbstractSwPackageItemProvider = new MMESPVersionedItemAbstractSwPackageItemProvider(this);
		}

		return mmespVersionedItemAbstractSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemConstructionTool} instances.
	 * @generated
	 */
	protected MMESPItemConstructionToolItemProvider mmespItemConstructionToolItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemConstructionTool}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemConstructionToolAdapter() {
		if (mmespItemConstructionToolItemProvider == null) {
			mmespItemConstructionToolItemProvider = new MMESPItemConstructionToolItemProvider(this);
		}

		return mmespItemConstructionToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemConstructionTool} instances.
	 * @generated
	 */
	protected MMESPVersionedItemConstructionToolItemProvider mmespVersionedItemConstructionToolItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemConstructionTool}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemConstructionToolAdapter() {
		if (mmespVersionedItemConstructionToolItemProvider == null) {
			mmespVersionedItemConstructionToolItemProvider = new MMESPVersionedItemConstructionToolItemProvider(this);
		}

		return mmespVersionedItemConstructionToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemDriverSwPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MMESPItemDriverSwPackageItemProvider mmespItemDriverSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPItemDriverSwPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMMESPItemDriverSwPackageAdapter() {
		if (mmespItemDriverSwPackageItemProvider == null) {
			mmespItemDriverSwPackageItemProvider = new MMESPItemDriverSwPackageItemProvider(this);
		}

		return mmespItemDriverSwPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemDriverSwPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MMESPVersionedItemDriverSwPackageItemProvider mmespVersionedItemDriverSwPackageItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.library.mesplibrary.MMESPVersionedItemDriverSwPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMMESPVersionedItemDriverSwPackageAdapter() {
		if (mmespVersionedItemDriverSwPackageItemProvider == null) {
			mmespVersionedItemDriverSwPackageItemProvider = new MMESPVersionedItemDriverSwPackageItemProvider(this);
		}

		return mmespVersionedItemDriverSwPackageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mmespLibraryItemProvider != null) mmespLibraryItemProvider.dispose();
		if (mmespPackageItemProvider != null) mmespPackageItemProvider.dispose();
		if (mmespItemSwPackageItemProvider != null) mmespItemSwPackageItemProvider.dispose();
		if (mmespVersionedItemSwPackageItemProvider != null) mmespVersionedItemSwPackageItemProvider.dispose();
		if (mmespItemSwInterfaceItemProvider != null) mmespItemSwInterfaceItemProvider.dispose();
		if (mmespVersionedItemSwInterfaceItemProvider != null) mmespVersionedItemSwInterfaceItemProvider.dispose();
		if (mmespItemOSSwPackageItemProvider != null) mmespItemOSSwPackageItemProvider.dispose();
		if (mmespVersionedItemOSSwPackageItemProvider != null) mmespVersionedItemOSSwPackageItemProvider.dispose();
		if (mmespItemOSSwInterfaceItemProvider != null) mmespItemOSSwInterfaceItemProvider.dispose();
		if (mmespVersionedItemOSSwInterfaceItemProvider != null) mmespVersionedItemOSSwInterfaceItemProvider.dispose();
		if (mmespItemPlatformSwPackageItemProvider != null) mmespItemPlatformSwPackageItemProvider.dispose();
		if (mmespVersionedItemPlatformSwPackageItemProvider != null) mmespVersionedItemPlatformSwPackageItemProvider.dispose();
		if (mmespItemDeploymentItemProvider != null) mmespItemDeploymentItemProvider.dispose();
		if (mmespVersionedItemDeploymentItemProvider != null) mmespVersionedItemDeploymentItemProvider.dispose();
		if (mmespItemAbstractSwPackageItemProvider != null) mmespItemAbstractSwPackageItemProvider.dispose();
		if (mmespVersionedItemAbstractSwPackageItemProvider != null) mmespVersionedItemAbstractSwPackageItemProvider.dispose();
		if (mmespItemConstructionToolItemProvider != null) mmespItemConstructionToolItemProvider.dispose();
		if (mmespVersionedItemConstructionToolItemProvider != null) mmespVersionedItemConstructionToolItemProvider.dispose();
		if (mmespItemDriverSwPackageItemProvider != null) mmespItemDriverSwPackageItemProvider.dispose();
		if (mmespVersionedItemDriverSwPackageItemProvider != null) mmespVersionedItemDriverSwPackageItemProvider.dispose();
	}

}
