/*******************************************************************************
 * Copyright (c) 2013 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mesp.mespdep.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mesp.mespdep.util.mespdepAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mespdepItemProviderAdapterFactory extends mespdepAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mespdepItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeployment} instances.
	 * @generated
	 */
	protected MMESPDeploymentItemProvider mmespDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDeploymentAdapter() {
		if (mmespDeploymentItemProvider == null) {
			mmespDeploymentItemProvider = new MMESPDeploymentItemProvider(this);
		}

		return mmespDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeploymentPlatform} instances.
	 * @generated
	 */
	protected MMESPDeploymentPlatformItemProvider mmespDeploymentPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeploymentPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDeploymentPlatformAdapter() {
		if (mmespDeploymentPlatformItemProvider == null) {
			mmespDeploymentPlatformItemProvider = new MMESPDeploymentPlatformItemProvider(this);
		}

		return mmespDeploymentPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeployedDevice} instances.
	 * @generated
	 */
	protected MMESPDeployedDeviceItemProvider mmespDeployedDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeployedDevice}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDeployedDeviceAdapter() {
		if (mmespDeployedDeviceItemProvider == null) {
			mmespDeployedDeviceItemProvider = new MMESPDeployedDeviceItemProvider(this);
		}

		return mmespDeployedDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeploymentAlternative} instances.
	 * @generated
	 */
	protected MMESPDeploymentAlternativeItemProvider mmespDeploymentAlternativeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeploymentAlternative}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDeploymentAlternativeAdapter() {
		if (mmespDeploymentAlternativeItemProvider == null) {
			mmespDeploymentAlternativeItemProvider = new MMESPDeploymentAlternativeItemProvider(this);
		}

		return mmespDeploymentAlternativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPSwPackageDeployment} instances.
	 * @generated
	 */
	protected MMESPSwPackageDeploymentItemProvider mmespSwPackageDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPSwPackageDeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPSwPackageDeploymentAdapter() {
		if (mmespSwPackageDeploymentItemProvider == null) {
			mmespSwPackageDeploymentItemProvider = new MMESPSwPackageDeploymentItemProvider(this);
		}

		return mmespSwPackageDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDriverSwPackageDeployment} instances.
	 * @generated
	 */
	protected MMESPDriverSwPackageDeploymentItemProvider mmespDriverSwPackageDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDriverSwPackageDeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDriverSwPackageDeploymentAdapter() {
		if (mmespDriverSwPackageDeploymentItemProvider == null) {
			mmespDriverSwPackageDeploymentItemProvider = new MMESPDriverSwPackageDeploymentItemProvider(this);
		}

		return mmespDriverSwPackageDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeviceDriverMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MMESPDeviceDriverMappingItemProvider mmespDeviceDriverMappingItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDeviceDriverMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMMESPDeviceDriverMappingAdapter() {
		if (mmespDeviceDriverMappingItemProvider == null) {
			mmespDeviceDriverMappingItemProvider = new MMESPDeviceDriverMappingItemProvider(this);
		}

		return mmespDeviceDriverMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDEPPackageFile} instances.
	 * @generated
	 */
	protected MMESPDEPPackageFileItemProvider mmespdepPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mesp.mespdep.MMESPDEPPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMESPDEPPackageFileAdapter() {
		if (mmespdepPackageFileItemProvider == null) {
			mmespdepPackageFileItemProvider = new MMESPDEPPackageFileItemProvider(this);
		}

		return mmespdepPackageFileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mmespDeploymentItemProvider != null) mmespDeploymentItemProvider.dispose();
		if (mmespDeploymentPlatformItemProvider != null) mmespDeploymentPlatformItemProvider.dispose();
		if (mmespDeployedDeviceItemProvider != null) mmespDeployedDeviceItemProvider.dispose();
		if (mmespDeploymentAlternativeItemProvider != null) mmespDeploymentAlternativeItemProvider.dispose();
		if (mmespSwPackageDeploymentItemProvider != null) mmespSwPackageDeploymentItemProvider.dispose();
		if (mmespDriverSwPackageDeploymentItemProvider != null) mmespDriverSwPackageDeploymentItemProvider.dispose();
		if (mmespDeviceDriverMappingItemProvider != null) mmespDeviceDriverMappingItemProvider.dispose();
		if (mmespdepPackageFileItemProvider != null) mmespdepPackageFileItemProvider.dispose();
	}

}
