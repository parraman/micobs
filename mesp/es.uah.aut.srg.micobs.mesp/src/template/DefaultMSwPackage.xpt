«REM»
/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT mespswp»
«IMPORT common»

«EXTENSION template::MESPStringHelper»

«DEFINE main FOR MMESPSWPPackageFile»
«FILE this.element.name.toLowerDefString() + ".mesp_swp" -»
/*
 * First we have to assign this file to a certain package
 */

package «this.package.uri»;

/*
 * Optionally, we can import packages to use their elements as references.
 */
 
«FOREACH (((MSwPackage)this.element).languages.eContainer).typeSelect(MCommonPackageFile).package.toSet() AS package -»
«IF this.package != package -»
import «package.uri»;
«ENDIF -»
«ENDFOREACH -»
«FOREACH (((MSwPackage)this.element).ctools.eContainer).typeSelect(MCommonPackageFile).package.toSet() AS package -»
«IF this.package != package -»
import «package.uri»;
«ENDIF -»
«ENDFOREACH -»

/*
 * Definition of a SwPackage. Every SwPackage should have:
 * - A name
 * - A version
 * - The list of languages in which it is implemented
 * - A list of provided SwInterfaces separated by commas
 * - A list of supported platforms
 *
 * And optionally can have:
 * - A list of common required software interfaces, which are reuired
 *   independently of the deployment platform
 * - A list of resources demanded independently of the deployment
 *   platform
 *
 * Furthermore, the platform definition has:
 * - A platform identifier
 * - The assginments of all the platform fields (osapi, os, architecture,
 *   microprocessor and board
 *
 * And optionally can have:
 * - A list of required software interface, relative to that platform
 * - A list of demanded resources, relative to that platform
 */

swpackage «this.element.name»
{
	version := «this.element.version»;
	
	languages := «((MSwPackage)this.element).languages.first().getElementName()»«FOREACH ((MSwPackage)this.element).languages.withoutFirst() AS language -», «language.getElementName()»«ENDFOREACH -»;
	
	construction tools := «((MSwPackage)this.element).ctools.first().getElementName()»«FOREACH ((MSwPackage)this.element).ctools.withoutFirst() AS ctool -», «ctool.getElementName()»«ENDFOREACH -»;
	
	provided interfaces {
	
		provides /* name */ {
		
//			parameter /* name */ := /* value */;
		
		};
	
	}; 
	
//	required interfaces {
//	
//		requires /* name */ {
//		
//			quantifiable resource /* name */ := /* Quantity */;
//			instantiable resource /* resource name */ /* instance name */ {
//				parameter /* name */ := /* value */;
//			};
//		
//		};
//	
//	}; 
	
	supported platforms
	{
		supported platform /* name */
		{
			osapi := /* name / any */;
			os := /* name / any */;
			architecture := /* name / any */;
			microprocessor := /* name / any */;
			board := /* name / any */;
			
//			required interfaces {
//				...
//			};

//			configuration parameters
//			{
//				...
//			};
		
		};
	};

//	configuration parameters
//	{ 
//		boolean /* name */ := /* default */;
//		integer /* name */ := /* default */ range /* ( / [ */ /* min */ , /* max */ /* ) / ] */;
//		real /* name */ := /* default */ range /* ( / [ */ /* min */ , /* max */ /* ) / ] */;
//		string /* name */ := /* default */;
//		enum /* name */ {
//			LITERAL_A, ...
//		} := /* default literal */; 
// 	};
	
};
«ENDFILE»
«ENDDEFINE»
