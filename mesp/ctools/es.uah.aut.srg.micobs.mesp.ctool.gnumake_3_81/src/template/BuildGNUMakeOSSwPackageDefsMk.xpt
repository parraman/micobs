«REM»
/*******************************************************************************
 * Copyright (c) 2013 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT mesposswp»
«IMPORT pdl»

«EXTENSION template::MICOBSStringHelper»
«EXTENSION template::GNUMakeStringHelper»
«EXTENSION template::MESPUtil»

«DEFINE main FOR MMESPOSSWPPackageFile»
«FILE "defs.mk" -»
# Label SRCS contains a list of all the source files that are to be compiled
# following the rules specifies by the chosen platform. All the source files
# included in this list are going to be compiled and linked to create the
# project executable. A common example of use for this label would be:
# 
# SRCS+=$(wildcard $(OSSWPACKAGE_FOLDER_NAME)/src/*.c)
# SRCS+=$(wildcard $(OSSWPACKAGE_FOLDER_NAME)/src/*.cpp)
# 
# The previous line would include in the list all the source files contained
# in the source root folder.

# In the case that the OS source files shall be compiled and linked separatedly
# from the rest of the source files, the label OSSRCS is provided. From the
# files included in this list, the label OSOBJS will be created by
# substituting the extensions of the included files.

# OSSWPACKAGE_FOLDER_NAME defines the name of the folder that will be used to
# link the package in a specific project. This variable can ONLY be used
# in substitutions when adding items to the SRCS label, since it will be
# redefined by the different packages as they are included.

«PROTECT CSTART '# ' CEND '' ID this.element.name.toLowerDefString() + "_common_src"»

SRCS+=

«ENDPROTECT»

# It is also possible to perform a selective compilation of source files 
# depending on the platform for which the resource is compiled by using
# the flags defined by the framework at configuration time. These flags have a
# known syntax.

«EXPAND osSupportedPlatforms FOR (MOSSwPackage)this.element -»

# It is also possible to create one or more targets to be executed before the
# compilation process. These targets should be included in the list:
# ALT_TARGETS+=

# Also, all the usual compilation and linking flags, like CFLAGS or LDFLAGS are
# available to be used. If you want to set an specific set of compilation flags
# for a certain number of source files, you should define the targets for those
# files in this very file, so that the framework will not use the default ones.

# All the configuration parameters defined for the resource can be used as
# flags for a conditional compilation. A parameter name called PARAMETER_NAME
# defines a label named CONFIG_PARAMETER_NAME whose value can be checked.
«ENDFILE»
«ENDDEFINE»

«DEFINE osSupportedPlatforms FOR MOSSwPackage»
«FOREACH ((MOperatingSystem)this.referencedElement).supportedPlatforms AS supportedPlatform -»
«IF supportedPlatform.microprocessor == null -»
ifeq ($(CONFIG_ARCH_«supportedPlatform.architecture.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_COMPILER_«supportedPlatform.compiler.getElementName().toUpperDefString()»), y)
# List of files to compile for the supported platform
# «supportedPlatform.name»

«PROTECT CSTART '# ' CEND '' ID supportedPlatform.getFullObjectNameToElementWithoutVersion().toLowerDefString()»

SRCS+=

«ENDPROTECT»

endif
endif
«ELSEIF supportedPlatform.board == null -»
ifeq ($(CONFIG_ARCH_«supportedPlatform.architecture.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_COMPILER_«supportedPlatform.compiler.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_MP_«supportedPlatform.microprocessor.getElementName().toUpperDefString()»), y)
# List of files to compile for the supported platform
# «supportedPlatform.name»

«PROTECT CSTART '# ' CEND '' ID supportedPlatform.getFullObjectNameToElementWithoutVersion().toLowerDefString()»

SRCS+=

«ENDPROTECT»

endif
endif
endif
«ELSE -»
ifeq ($(CONFIG_ARCH_«supportedPlatform.architecture.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_COMPILER_«supportedPlatform.compiler.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_MP_«supportedPlatform.microprocessor.getElementName().toUpperDefString()»), y)
ifeq ($(CONFIG_BOARD_«supportedPlatform.board.getElementName().toUpperDefString()»), y)
# List of files to compile for the supported platform
# «supportedPlatform.name»

«PROTECT CSTART '# ' CEND '' ID supportedPlatform.getFullObjectNameToElementWithoutVersion().toLowerDefString()»

SRCS+=

«ENDPROTECT»

endif
endif
endif
endif
«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»