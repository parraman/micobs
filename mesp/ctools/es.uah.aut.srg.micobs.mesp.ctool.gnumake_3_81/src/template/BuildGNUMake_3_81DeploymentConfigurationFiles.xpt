«REM»
/*******************************************************************************
 * Copyright (c) 2013 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT mespdep»
«IMPORT mespcommon»
«IMPORT common»
«IMPORT mespswp»
«IMPORT mespswi»

«EXTENSION template::MESPStringHelper»
«EXTENSION template::MESPUtil»
«EXTENSION template::GNUMakeStringHelper»

«DEFINE main FOR MMESPDeployment»
«IF this.deploymentAlternatives.isEmpty -»
«FOREACH this.deploymentPlatforms AS deploymentPlatform -»
«EXPAND generateConfigFile(null, deploymentPlatform) FOR this -»
«ENDFOREACH -»
«ELSE -»
«FOREACH this.getLeafDeploymentAlternatives() AS alternative -»
«FOREACH alternative.deploymentPlatforms AS deploymentPlatform -»
«EXPAND generateConfigFile(alternative, deploymentPlatform) FOR this -»
«ENDFOREACH -»
«ENDFOREACH -»
«ENDIF -»
«ENDDEFINE»

«DEFINE generateConfigFile(MMESPDeploymentAlternative alternative, MMESPDeploymentPlatform deploymentPlatform) FOR MMESPDeployment»
«FILE "/config/" + this.getDeploymentFolderName(alternative, deploymentPlatform) + "/public/config.h" -»
#ifndef PUBLIC__CONFIG_H
#define PUBLIC__CONFIG_H

// OSAPI Configuration Definitions

«FOREACH deploymentPlatform.platform.osapi.getAllInheritedOSAPIs().name.toSet() AS name -»
#define CONFIG_OSAPI_«name.toUpperDefString()»
«ENDFOREACH -»
«FOREACH deploymentPlatform.platform.osapi.getAllInheritedOSAPIs() AS osapi -»
#define CONFIG_OSAPI_«osapi.getElementName().toUpperDefString()»
«ENDFOREACH -»

// OS Configuration Definitions

«FOREACH deploymentPlatform.platform.os.getAllInheritedOperatingSystems().name.toSet() AS name -»
#define CONFIG_OS_«name.toUpperDefString()»
«ENDFOREACH -»
«FOREACH deploymentPlatform.platform.os.getAllInheritedOperatingSystems() AS os -»
#define CONFIG_OS_«os.getElementName().toUpperDefString()»
«ENDFOREACH -»

// Architecture Configuration Definitions

«FOREACH deploymentPlatform.platform.architecture.getAllExtendedArchitectures().name.toSet() AS name -»
#define CONFIG_ARCH_«deploymentPlatform.platform.architecture.name.toUpperDefString()»
«ENDFOREACH -»
«FOREACH deploymentPlatform.platform.architecture.getAllExtendedArchitectures() AS architecture -»
#define CONFIG_ARCH_«architecture.getElementName().toUpperDefString()»
«ENDFOREACH -»

// Compiler Configuration Definitions

«FOREACH deploymentPlatform.platform.compiler.getAllExtendedCompilers().name.toSet() AS name -»
#define CONFIG_COMPILER_«deploymentPlatform.platform.compiler.name.toUpperDefString()»
«ENDFOREACH -»
«FOREACH deploymentPlatform.platform.compiler.getAllExtendedCompilers() AS compiler -»
#define CONFIG_COMPILER_«compiler.getElementName().toUpperDefString()»
«ENDFOREACH -»

// Microprocessor Configuration Definitions

«IF deploymentPlatform.platform.microprocessor != null -»
#define CONFIG_MP_«deploymentPlatform.platform.microprocessor.name.toUpperDefString()»
#define CONFIG_MP_«deploymentPlatform.platform.microprocessor.getElementName().toUpperDefString()»
«ELSE -»
#define CONFIG_MP_UNDEFINED
«ENDIF -»

// Board Configuration Definitions

«IF deploymentPlatform.platform.board != null -»
#define CONFIG_BOARD_«deploymentPlatform.platform.board.name.toUpperDefString()»
#define CONFIG_BOARD_«deploymentPlatform.platform.board.getElementName().toUpperDefString()»
«ELSE -»
#define CONFIG_BOARD_UNDEFINED
«ENDIF -»
«EXPAND printParameters FOR deploymentPlatform -»
«IF alternative == null -»
«EXPAND printParameters(deploymentPlatform, {}.addAll(this.getAllSwPackageParameterValueAssignments(alternative)).addAll(deploymentPlatform.parameterValueAssignments)) FOREACH this.deployedSwPackages -»
«ELSE -»
«EXPAND printParameters(deploymentPlatform, {}.addAll(this.getAllSwPackageParameterValueAssignments(alternative)).addAll(deploymentPlatform.parameterValueAssignments)) FOREACH alternative.getAllDeployedSwPackagesFromAlternative() -»
«ENDIF -»
«FOREACH deploymentPlatform.platformSwPackage.osSwPackages AS osswp -»
«FOREACH osswp.providedOSSWIs.select(e|e.referencedElement == deploymentPlatform.platform.osapi).getAllQuantifiableResources() AS resource -»
«IF alternative == null -»
#define «("CONFIG_OSSWP_" + osswp.getElementName() + 
		  "_DEMANDED_" + resource.getFullObjectNameToElement()).toUpperDefString()» «this.getSumDemands(deploymentPlatform,resource)»
«ELSE -»
#define «("CONFIG_OSSWP_" + osswp.getElementName() + 
		  "_DEMANDED_" + resource.getFullObjectNameToElement()).toUpperDefString()» «alternative.getSumDemands(deploymentPlatform,resource)»
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«IF alternative == null -»
«FOREACH this.deployedSwPackages AS swpd -»
«FOREACH swpd.swPackage.getAllEffectivelyProvidedSwInterfaces().getAllQuantifiableResources() AS resource -»
#define «("CONFIG_SWP_" + swpd.swPackage.getElementName() + 
		  "_DEMANDED_" + resource.getFullObjectNameToElement()).toUpperDefString()» «this.getSumDemands(deploymentPlatform,resource).toString()»
«ENDFOREACH -»
«ENDFOREACH -»
«ELSE -»
«FOREACH alternative.getAllDeployedSwPackagesFromAlternative() AS swpd -»
«FOREACH swpd.swPackage.getAllEffectivelyProvidedSwInterfaces().getAllQuantifiableResources() AS resource -»
#define «("CONFIG_SWP_" + swpd.swPackage.getElementName() + 
		  "_DEMANDED_" + resource.getFullObjectNameToElement()).toUpperDefString()» «alternative.getSumDemands(deploymentPlatform,resource).toString()»
«ENDFOREACH -»
«ENDFOREACH -»
«ENDIF -»
«IF alternative == null -»
«FOREACH this.deployedSwPackages.typeSelect(MMESPDriverSwPackageDeployment) AS dswpd -»
«EXPAND printDeviceMappings(deploymentPlatform, {}.addAll(this.getAllSwPackageParameterValueAssignments(alternative)).addAll(deploymentPlatform.parameterValueAssignments)) FOR (MMESPDriverSwPackageDeployment)dswpd -»
«ENDFOREACH -»
«ELSE -»
«FOREACH alternative.getAllDeployedSwPackagesFromAlternative().typeSelect(MMESPDriverSwPackageDeployment) AS dswpd -»
«EXPAND printDeviceMappings(deploymentPlatform, {}.addAll(this.getAllSwPackageParameterValueAssignments(alternative)).addAll(deploymentPlatform.parameterValueAssignments)) FOR (MMESPDriverSwPackageDeployment)dswpd -»
«ENDFOREACH -»
«ENDIF -»

#endif // PUBLIC__CONFIG_H
«ENDFILE»
«ENDDEFINE»

«DEFINE printDeviceMappings(MMESPDeploymentPlatform deploymentPlatform, Collection[common::MParameterValueAssignment] assignments) FOR MMESPDriverSwPackageDeployment -»
«FOREACH ((MDriverSwPackageSupportedPlatform)(this.swPackage.getMatchingPlatform(deploymentPlatform.platform))).supportedDevices AS supportedDevice -»
«IF this.deviceDriverMappings.supportedDevice.contains(supportedDevice) -»
«LET this.deviceDriverMappings.selectFirst(e|e.supportedDevice == supportedDevice) AS mapping -»
#define «("CONFIG_SWPDEV_" + mapping.supportedDevice.getFullObjectNameToElement()).toUpperDefString()» 1

#define «("CONFIG_SWPDEV_" + mapping.supportedDevice.getFullObjectNameToElement() + "_NAME").toUpperDefString()» "«mapping.deployedDevice.name»"
«FOREACH mapping.supportedDevice.device.parameters AS parameter -»
«IF mapping.deployedDevice.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty == false -»
«EXPAND printParameterValueAssignment("SWPDEV_" + mapping.supportedDevice.getFullObjectNameToElement() + "_PARAM_" + parameter.name, assignments, deploymentPlatform) FOR
	mapping.deployedDevice.parameterValueAssignments.select(e|e.parameter == parameter).toList().first() -»
«ELSE -»
«EXPAND printDefaultValue("SWPDEV_" + mapping.supportedDevice.getFullObjectNameToElement() + "_PARAM_" + parameter.name, assignments, deploymentPlatform) FOR parameter -»
«ENDIF -»
«ENDFOREACH -»
«ENDLET»
«ELSE -»
#define «("CONFIG_SWPDEV_" + supportedDevice.getFullObjectNameToElement()).toUpperDefString()» 0

#define «("CONFIG_SWPDEV_" + supportedDevice.getFullObjectNameToElement() + "_NAME").toUpperDefString()» NULL
«FOREACH supportedDevice.device.parameters AS parameter -»
«EXPAND printDefaultValue("SWPDEV_" + supportedDevice.getFullObjectNameToElement() + "_PARAM_" + parameter.name, assignments, deploymentPlatform) FOR parameter -»
«ENDFOREACH -»
«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»

«DEFINE printParameters(MMESPDeploymentPlatform deploymentPlatform, Collection[common::MParameterValueAssignment] assignments) FOR MMESPSwPackageDeployment -»
«FOREACH this.swPackage.getAllEffectivelyProvidedSwInterfaces() AS swi -»
«FOREACH swi.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH swi.parameters.select(e|e.metaType != MEnumParameterDefinition) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.swPackage.getAllParameterValueAssignments(swi).select(e|e.parameter == parameter).isEmpty == false -»
«EXPAND printParameterValueAssignment("SWI_" + parameter.getFullObjectNameToElement(), assignments, deploymentPlatform) FOR
	this.swPackage.getAllParameterValueAssignments(swi).select(e|e.parameter == parameter).toList().first() -»
«ELSE -»
«EXPAND printDefaultValue("SWI_" + parameter.getFullObjectNameToElement(), assignments, deploymentPlatform) FOR parameter -»
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.swPackage.getInstantiableResourceDemands(deploymentPlatform.platform) AS ird -»
«FOREACH ird.resource.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_SWI_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH ird.resource.parameters.select(e|e.metaType != MEnumParameterDefinition) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF ird.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("SWI_" + ird.resource.getFullObjectNameToElement() + "_" + ird.getFullObjectNameToElement() + "_" + parameter.name, assignments, deploymentPlatform) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("SWI_" + ird.resource.getFullObjectNameToElement() + "_" + ird.getFullObjectNameToElement() + "_" + parameter.name, assignments, deploymentPlatform) FOR ird.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.swPackage.getAllEnumParameterDefinitions() AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_SWP_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_SWP_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_SWP_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.swPackage.getAllParameters(deploymentPlatform.platform) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.getAllParameterValueAssignments().select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue(("SWP_" + parameter.getFullObjectNameToElement()).toUpperDefString(), assignments,deploymentPlatform) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment(("SWP_" + parameter.getFullObjectNameToElement()).toUpperDefString(), assignments, deploymentPlatform) FOR this.getAllParameterValueAssignments().toList().select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»

«DEFINE printParameterValueAssignment(String name, Collection[common::MParameterValueAssignment] assignments, MMESPDeploymentPlatform deploymentPlatform) FOR common::MParameterValueAssignment -»
«IF this.parameter.metaType.superTypes.contains(common::MBooleanParameter) -»
«IF this.getParameterValue(deploymentPlatform.platform).parseBooleanExpression(assignments, deploymentPlatform.platform) == false -»
#define «("CONFIG_" + name).toUpperDefString()» 0
«ELSE -»
#define «("CONFIG_" + name).toUpperDefString()» 1
«ENDIF -»
«ELSEIF this.parameter.metaType.superTypes.contains(common::MEnumParameter) -»
«LET this.getParameterValue(deploymentPlatform.platform).parseEnumExpression(assignments, deploymentPlatform.platform) AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ELSE -»
#define «("CONFIG_" + name).toUpperDefString()» 1
«ENDIF -»
«FOREACH ((common::MEnumParameter)this.parameter).enumDefinition.literals AS lt -»
«IF lt == literal -»
#define «("CONFIG_" + name + "_" + lt.name).toUpperDefString()» 1
«ELSE»
#define «("CONFIG_" + name + "_" + lt.name).toUpperDefString()» 0
«ENDIF -»
«ENDFOREACH -»
«ENDLET -»
«ELSEIF this.parameter.metaType.superTypes.contains(common::MIntegerParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» «this.getParameterValue(deploymentPlatform.platform).parseIntegerExpression(assignments, deploymentPlatform.platform).toString()»
«ELSEIF this.parameter.metaType.superTypes.contains(common::MRealParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» «this.getParameterValue(deploymentPlatform.platform).parseRealExpression(assignments, deploymentPlatform.platform).toString()»
«ELSEIF this.parameter.metaType.superTypes.contains(common::MStringParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» "«this.getParameterValue(deploymentPlatform.platform).parseStringExpression(assignments, deploymentPlatform.platform)»"
«ENDIF -»
«ENDDEFINE»

«DEFINE printDefaultValue(String name, Collection[common::MParameterValueAssignment] assignments, MMESPDeploymentPlatform deploymentPlatform) FOR common::MParameter -»
«IF this.metaType.superTypes.contains(common::MBooleanParameter) -»
«IF this.getDefaultValue(deploymentPlatform.platform).parseBooleanExpression(assignments, deploymentPlatform.platform) == false -»
#define «("CONFIG_" + name).toUpperDefString()» 0
«ELSE -»
#define «("CONFIG_" + name).toUpperDefString()» 1
«ENDIF -»
«ELSEIF this.metaType.superTypes.contains(common::MEnumParameter) -»
«LET this.getDefaultValue(deploymentPlatform.platform).parseEnumExpression(assignments, deploymentPlatform.platform) AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_" + name).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ELSE -»
#define «("CONFIG_" + name).toUpperDefString()» 1
«ENDIF -»
«FOREACH ((common::MEnumParameter)this).enumDefinition.literals AS lt -»
«IF lt == literal -»
#define «("CONFIG_" + name + "_" + lt.name).toUpperDefString()» 1
«ELSE»
#define «("CONFIG_" + name + "_" + lt.name).toUpperDefString()» 0
«ENDIF -»
«ENDFOREACH -»
«ENDLET -»
«ELSEIF this.metaType.superTypes.contains(common::MIntegerParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» «this.getDefaultValue(deploymentPlatform.platform).parseIntegerExpression(assignments, deploymentPlatform.platform).toString()»
«ELSEIF this.metaType.superTypes.contains(common::MRealParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» «this.getDefaultValue(deploymentPlatform.platform).parseRealExpression(assignments, deploymentPlatform.platform).toString()»
«ELSEIF this.metaType.superTypes.contains(common::MStringParameter) -»
#define «("CONFIG_" + name).toUpperDefString()» "«this.getDefaultValue(deploymentPlatform.platform).parseStringExpression(assignments, deploymentPlatform.platform)»"
«ENDIF -»
«ENDDEFINE»

«DEFINE printParameters FOR mespdep::MMESPDeploymentPlatform -»
«FOREACH this.platform.os.getAllSupportedOSAPIs() AS osapi -»
«FOREACH osapi.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_OSAPI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_OSAPI_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_OSAPI_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH osapi.parameters.select(e|e.metaType != MEnumParameterDefinition) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.platform.os.getAllParameterValueAssignments(osapi).select(e|e.parameter == parameter).isEmpty == false -»
«EXPAND printParameterValueAssignment("OSAPI_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR
	this.platform.os.getAllParameterValueAssignments(osapi).select(e|e.parameter == parameter).toList().first() -»
«ELSE -»
«EXPAND printDefaultValue("OSAPI_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.os.getAllEnumParameterDefinitions() AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_OS_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_OS_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_OS_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.os.getAllParameters(this.platform) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("OS_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("OS_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«FOREACH this.platform.architecture.getAllEnumParameterDefinitions() AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_ARCH_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_ARCH_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_ARCH_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.architecture.getAllParameters() AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("ARCH_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("ARCH_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«FOREACH this.platform.compiler.getAllEnumParameterDefinitions(this.platform.architecture) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_COMPILER_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_COMPILER_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_COMPILER_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.compiler.getAllParameters(this.platform.architecture) AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("COMPILER_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("COMPILER_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«IF this.platform.microprocessor != null -»
«FOREACH this.platform.microprocessor.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_MP_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_MP_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_MP_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.microprocessor.getMPParameters() AS parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("MP_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("MP_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«ENDIF -»
«IF this.platform.board != null -»
«FOREACH this.platform.board.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_BOARD_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_BOARD_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_BOARD_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.board.getBoardParameters() AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("BOARD_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("BOARD_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«ENDIF -»
«FOREACH this.platform.parameters.typeSelect(MEnumParameterDefinition) AS enumDef -»
«FOREACH enumDef.literals AS literal -»
«IF literal.metaType == common::MEnumParamRealLiteral -»
#define «("CONFIG_PLT_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamRealLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamIntegerLiteral -»
#define «("CONFIG_PLT_" + literal.getFullObjectNameToElement()).toUpperDefString()» «((common::MEnumParamIntegerLiteral)literal).value»
«ELSEIF literal.metaType == common::MEnumParamStringLiteral -»
#define «("CONFIG_PLT_" + literal.getFullObjectNameToElement()).toUpperDefString()» "«((common::MEnumParamStringLiteral)literal).value»"
«ENDIF -»
«ENDFOREACH -»
«ENDFOREACH -»
«FOREACH this.platform.getParameters() AS parameter -»
«EXPAND printParameterDescription FOR parameter -»
«IF this.parameterValueAssignments.select(e|e.parameter == parameter).isEmpty -»
«EXPAND printDefaultValue("PLT_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR parameter -»
«ELSE -»
«EXPAND printParameterValueAssignment("PLT_" + parameter.getFullObjectNameToElement(), {}.addAll(this.parameterValueAssignments).addAll(this.platform.os.getAllParameterValueAssignments()), this) FOR this.parameterValueAssignments.select(e|e.parameter == parameter).first() -»
«ENDIF -»
«ENDFOREACH -»
«ENDDEFINE»

«DEFINE printParameterDescription FOR MParameter»
«IF this.description != null -»
/**
«FOREACH this.description.split("[\\r\\n]+") AS line -»
 * «line»
«ENDFOREACH -»
 */
«ENDIF -»
«ENDDEFINE»