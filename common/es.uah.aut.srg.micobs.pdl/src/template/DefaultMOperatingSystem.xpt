«REM»
/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT pdl»
«IMPORT common»

«EXTENSION template::PDLStringHelper»

«DEFINE main FOR MPDLPackageFile»
«FILE this.element.name.toLowerDefString() + ".micobs_pdl" -»
/*
 * First we have to assign this file to a certain package.
 */

package «this.package.uri»;

/*
 * Optionally, we can import packages to use their elements as references.
 */

«FOREACH (((MOperatingSystem)this.element).languages.eContainer).typeSelect(MCommonPackageFile).package.toSet() AS package -»
«IF this.package != package -»
import «package.uri»;
«ENDIF -»
«ENDFOREACH -»

/**
 * Definition of an Operating System. Every Operating System should have:
 * - A name
 * - A version
 * - The list of languages in which it is implemented
 * - A list of implemented Operating System APIs
 * - A list of supported platforms
 * 
 * And optionally can define a list of configuration parameters.
 */

os «this.element.name»
{
	version := «this.element.version»;
	
	languages := «((MOperatingSystem)this.element).languages.first().getElementName()»«FOREACH ((MOperatingSystem)this.element).languages.withoutFirst() AS language -», «language.getElementName()»«ENDFOREACH -»;
	
	supported osapis {
		
		supports /* osapi */ {
			
			/* parameter name := value */
		
		};
		
		
	};
	
	supported platforms
	{
		supported platform /* name */
		{
			architecture := /* name */;
			compiler := /* name */;
			microprocessor := /* name / any */;
			board := /* name / any */;

//			configuration parameters
//			{
//				...
//			};
		
		};
	};

//	configuration parameters
//	{ 
//		boolean /* name */ := /* default */;
//		integer /* name */ := /* default */ range /* ( / [ */ /* min */ , /* max */ /* ) / ] */;
//		real /* name */ := /* default */ range /* ( / [ */ /* min */ , /* max */ /* ) / ] */;
//		string /* name */ := /* default */;
//		enum /* name */ {
//			LITERAL_A, ...
//		};
//		enum /* definition */ /* name */ := /* default literal */;  
// 	};

};
«ENDFILE»
«ENDDEFINE»
