/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.common.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.common.util.commonAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class commonItemProviderAdapterFactory extends commonAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public commonItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MCommonPackageParametricReferencingElement} instances.
	 * @generated
	 */
	protected MCommonPackageParametricReferencingElementItemProvider mCommonPackageParametricReferencingElementItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MCommonPackageParametricReferencingElement}.
	 * @generated
	 */
	@Override
	public Adapter createMCommonPackageParametricReferencingElementAdapter() {
		if (mCommonPackageParametricReferencingElementItemProvider == null) {
			mCommonPackageParametricReferencingElementItemProvider = new MCommonPackageParametricReferencingElementItemProvider(this);
		}

		return mCommonPackageParametricReferencingElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParameterDefinition} instances.
	 * @generated
	 */
	protected MEnumParameterDefinitionItemProvider mEnumParameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParameterDefinition}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParameterDefinitionAdapter() {
		if (mEnumParameterDefinitionItemProvider == null) {
			mEnumParameterDefinitionItemProvider = new MEnumParameterDefinitionItemProvider(this);
		}

		return mEnumParameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MBooleanParameterSingleExpression} instances.
	 * @generated
	 */
	protected MBooleanParameterSingleExpressionItemProvider mBooleanParameterSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MBooleanParameterSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParameterSingleExpressionAdapter() {
		if (mBooleanParameterSingleExpressionItemProvider == null) {
			mBooleanParameterSingleExpressionItemProvider = new MBooleanParameterSingleExpressionItemProvider(this);
		}

		return mBooleanParameterSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MStringParameterSingleExpression} instances.
	 * @generated
	 */
	protected MStringParameterSingleExpressionItemProvider mStringParameterSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MStringParameterSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParameterSingleExpressionAdapter() {
		if (mStringParameterSingleExpressionItemProvider == null) {
			mStringParameterSingleExpressionItemProvider = new MStringParameterSingleExpressionItemProvider(this);
		}

		return mStringParameterSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MIntegerParameterSingleExpression} instances.
	 * @generated
	 */
	protected MIntegerParameterSingleExpressionItemProvider mIntegerParameterSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MIntegerParameterSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParameterSingleExpressionAdapter() {
		if (mIntegerParameterSingleExpressionItemProvider == null) {
			mIntegerParameterSingleExpressionItemProvider = new MIntegerParameterSingleExpressionItemProvider(this);
		}

		return mIntegerParameterSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParameterSingleExpression} instances.
	 * @generated
	 */
	protected MEnumParameterSingleExpressionItemProvider mEnumParameterSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParameterSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParameterSingleExpressionAdapter() {
		if (mEnumParameterSingleExpressionItemProvider == null) {
			mEnumParameterSingleExpressionItemProvider = new MEnumParameterSingleExpressionItemProvider(this);
		}

		return mEnumParameterSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParameterLiteral} instances.
	 * @generated
	 */
	protected MEnumParameterLiteralItemProvider mEnumParameterLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParameterLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParameterLiteralAdapter() {
		if (mEnumParameterLiteralItemProvider == null) {
			mEnumParameterLiteralItemProvider = new MEnumParameterLiteralItemProvider(this);
		}

		return mEnumParameterLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MRealParameterSingleExpression} instances.
	 * @generated
	 */
	protected MRealParameterSingleExpressionItemProvider mRealParameterSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MRealParameterSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParameterSingleExpressionAdapter() {
		if (mRealParameterSingleExpressionItemProvider == null) {
			mRealParameterSingleExpressionItemProvider = new MRealParameterSingleExpressionItemProvider(this);
		}

		return mRealParameterSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterOOR} instances.
	 * @generated
	 */
	protected MParameterOORItemProvider mParameterOORItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterOOR}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterOORAdapter() {
		if (mParameterOORItemProvider == null) {
			mParameterOORItemProvider = new MParameterOORItemProvider(this);
		}

		return mParameterOORItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterOCR} instances.
	 * @generated
	 */
	protected MParameterOCRItemProvider mParameterOCRItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterOCR}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterOCRAdapter() {
		if (mParameterOCRItemProvider == null) {
			mParameterOCRItemProvider = new MParameterOCRItemProvider(this);
		}

		return mParameterOCRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterCCR} instances.
	 * @generated
	 */
	protected MParameterCCRItemProvider mParameterCCRItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterCCR}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterCCRAdapter() {
		if (mParameterCCRItemProvider == null) {
			mParameterCCRItemProvider = new MParameterCCRItemProvider(this);
		}

		return mParameterCCRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterCOR} instances.
	 * @generated
	 */
	protected MParameterCORItemProvider mParameterCORItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterCOR}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterCORAdapter() {
		if (mParameterCORItemProvider == null) {
			mParameterCORItemProvider = new MParameterCORItemProvider(this);
		}

		return mParameterCORItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParamIntegerLiteral} instances.
	 * @generated
	 */
	protected MEnumParamIntegerLiteralItemProvider mEnumParamIntegerLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParamIntegerLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamIntegerLiteralAdapter() {
		if (mEnumParamIntegerLiteralItemProvider == null) {
			mEnumParamIntegerLiteralItemProvider = new MEnumParamIntegerLiteralItemProvider(this);
		}

		return mEnumParamIntegerLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParamRealLiteral} instances.
	 * @generated
	 */
	protected MEnumParamRealLiteralItemProvider mEnumParamRealLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParamRealLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamRealLiteralAdapter() {
		if (mEnumParamRealLiteralItemProvider == null) {
			mEnumParamRealLiteralItemProvider = new MEnumParamRealLiteralItemProvider(this);
		}

		return mEnumParamRealLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MEnumParamStringLiteral} instances.
	 * @generated
	 */
	protected MEnumParamStringLiteralItemProvider mEnumParamStringLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MEnumParamStringLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamStringLiteralAdapter() {
		if (mEnumParamStringLiteralItemProvider == null) {
			mEnumParamStringLiteralItemProvider = new MEnumParamStringLiteralItemProvider(this);
		}

		return mEnumParamStringLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueIntegerLiteral} instances.
	 * @generated
	 */
	protected MParameterValueIntegerLiteralItemProvider mParameterValueIntegerLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueIntegerLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueIntegerLiteralAdapter() {
		if (mParameterValueIntegerLiteralItemProvider == null) {
			mParameterValueIntegerLiteralItemProvider = new MParameterValueIntegerLiteralItemProvider(this);
		}

		return mParameterValueIntegerLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueRealLiteral} instances.
	 * @generated
	 */
	protected MParameterValueRealLiteralItemProvider mParameterValueRealLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueRealLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueRealLiteralAdapter() {
		if (mParameterValueRealLiteralItemProvider == null) {
			mParameterValueRealLiteralItemProvider = new MParameterValueRealLiteralItemProvider(this);
		}

		return mParameterValueRealLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueBooleanLiteral} instances.
	 * @generated
	 */
	protected MParameterValueBooleanLiteralItemProvider mParameterValueBooleanLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueBooleanLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueBooleanLiteralAdapter() {
		if (mParameterValueBooleanLiteralItemProvider == null) {
			mParameterValueBooleanLiteralItemProvider = new MParameterValueBooleanLiteralItemProvider(this);
		}

		return mParameterValueBooleanLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueStringLiteral} instances.
	 * @generated
	 */
	protected MParameterValueStringLiteralItemProvider mParameterValueStringLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueStringLiteral}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueStringLiteralAdapter() {
		if (mParameterValueStringLiteralItemProvider == null) {
			mParameterValueStringLiteralItemProvider = new MParameterValueStringLiteralItemProvider(this);
		}

		return mParameterValueStringLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueRefObject} instances.
	 * @generated
	 */
	protected MParameterValueRefObjectItemProvider mParameterValueRefObjectItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueRefObject}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueRefObjectAdapter() {
		if (mParameterValueRefObjectItemProvider == null) {
			mParameterValueRefObjectItemProvider = new MParameterValueRefObjectItemProvider(this);
		}

		return mParameterValueRefObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueExpression} instances.
	 * @generated
	 */
	protected MParameterValueExpressionItemProvider mParameterValueExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueExpressionAdapter() {
		if (mParameterValueExpressionItemProvider == null) {
			mParameterValueExpressionItemProvider = new MParameterValueExpressionItemProvider(this);
		}

		return mParameterValueExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueTERM} instances.
	 * @generated
	 */
	protected MParameterValueTERMItemProvider mParameterValueTERMItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueTERM}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueTERMAdapter() {
		if (mParameterValueTERMItemProvider == null) {
			mParameterValueTERMItemProvider = new MParameterValueTERMItemProvider(this);
		}

		return mParameterValueTERMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValuePAR} instances.
	 * @generated
	 */
	protected MParameterValuePARItemProvider mParameterValuePARItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValuePAR}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValuePARAdapter() {
		if (mParameterValuePARItemProvider == null) {
			mParameterValuePARItemProvider = new MParameterValuePARItemProvider(this);
		}

		return mParameterValuePARItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueAssignmentSingleExpression} instances.
	 * @generated
	 */
	protected MParameterValueAssignmentSingleExpressionItemProvider mParameterValueAssignmentSingleExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueAssignmentSingleExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueAssignmentSingleExpressionAdapter() {
		if (mParameterValueAssignmentSingleExpressionItemProvider == null) {
			mParameterValueAssignmentSingleExpressionItemProvider = new MParameterValueAssignmentSingleExpressionItemProvider(this);
		}

		return mParameterValueAssignmentSingleExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueRange} instances.
	 * @generated
	 */
	protected MParameterValueRangeItemProvider mParameterValueRangeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueRange}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueRangeAdapter() {
		if (mParameterValueRangeItemProvider == null) {
			mParameterValueRangeItemProvider = new MParameterValueRangeItemProvider(this);
		}

		return mParameterValueRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.common.MParameterValueDependentItemsList} instances.
	 * @generated
	 */
	protected MParameterValueDependentItemsListItemProvider mParameterValueDependentItemsListItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.common.MParameterValueDependentItemsList}.
	 * @generated
	 */
	@Override
	public Adapter createMParameterValueDependentItemsListAdapter() {
		if (mParameterValueDependentItemsListItemProvider == null) {
			mParameterValueDependentItemsListItemProvider = new MParameterValueDependentItemsListItemProvider(this);
		}

		return mParameterValueDependentItemsListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mCommonPackageParametricReferencingElementItemProvider != null) mCommonPackageParametricReferencingElementItemProvider.dispose();
		if (mEnumParameterDefinitionItemProvider != null) mEnumParameterDefinitionItemProvider.dispose();
		if (mBooleanParameterSingleExpressionItemProvider != null) mBooleanParameterSingleExpressionItemProvider.dispose();
		if (mStringParameterSingleExpressionItemProvider != null) mStringParameterSingleExpressionItemProvider.dispose();
		if (mIntegerParameterSingleExpressionItemProvider != null) mIntegerParameterSingleExpressionItemProvider.dispose();
		if (mEnumParameterSingleExpressionItemProvider != null) mEnumParameterSingleExpressionItemProvider.dispose();
		if (mEnumParameterLiteralItemProvider != null) mEnumParameterLiteralItemProvider.dispose();
		if (mRealParameterSingleExpressionItemProvider != null) mRealParameterSingleExpressionItemProvider.dispose();
		if (mParameterOORItemProvider != null) mParameterOORItemProvider.dispose();
		if (mParameterOCRItemProvider != null) mParameterOCRItemProvider.dispose();
		if (mParameterCCRItemProvider != null) mParameterCCRItemProvider.dispose();
		if (mParameterCORItemProvider != null) mParameterCORItemProvider.dispose();
		if (mEnumParamIntegerLiteralItemProvider != null) mEnumParamIntegerLiteralItemProvider.dispose();
		if (mEnumParamRealLiteralItemProvider != null) mEnumParamRealLiteralItemProvider.dispose();
		if (mEnumParamStringLiteralItemProvider != null) mEnumParamStringLiteralItemProvider.dispose();
		if (mParameterValueIntegerLiteralItemProvider != null) mParameterValueIntegerLiteralItemProvider.dispose();
		if (mParameterValueRealLiteralItemProvider != null) mParameterValueRealLiteralItemProvider.dispose();
		if (mParameterValueBooleanLiteralItemProvider != null) mParameterValueBooleanLiteralItemProvider.dispose();
		if (mParameterValueStringLiteralItemProvider != null) mParameterValueStringLiteralItemProvider.dispose();
		if (mParameterValueRefObjectItemProvider != null) mParameterValueRefObjectItemProvider.dispose();
		if (mParameterValueExpressionItemProvider != null) mParameterValueExpressionItemProvider.dispose();
		if (mParameterValueTERMItemProvider != null) mParameterValueTERMItemProvider.dispose();
		if (mParameterValuePARItemProvider != null) mParameterValuePARItemProvider.dispose();
		if (mParameterValueAssignmentSingleExpressionItemProvider != null) mParameterValueAssignmentSingleExpressionItemProvider.dispose();
		if (mParameterValueRangeItemProvider != null) mParameterValueRangeItemProvider.dispose();
		if (mParameterValueDependentItemsListItemProvider != null) mParameterValueDependentItemsListItemProvider.dispose();
	}

}
