/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
grammar es.uah.aut.srg.micobs.mclev.lang.DOM with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/mclev/mclevdom" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://srg.aut.uah.es/micobs/system" as system
import "http://srg.aut.uah.es/micobs/common" as common
import "http://srg.aut.uah.es/micobs/pdl" as pdl
import "http://srg.aut.uah.es/micobs/mclev/mclevsai" as mclevsai
import "http://srg.aut.uah.es/micobs/mclev/library/mclevlibrary" as mclevlibrary

MMCLEVDOMPackageFile returns MMCLEVDOMPackageFile:
	'package' package=[mclevlibrary::MMCLEVPackage|QualifiedName] ';'
	('import' imports+=[common::MCommonPackage|QualifiedName] ';')*
	element=MMCLEVDOMPackageElement
    ;

MMCLEVDOMPackageElement returns MMCLEVDOMPackageElement:
	MDomain;

MDomain returns MDomain:
	MIODomain | MAODomain;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

MIODomain returns MIODomain:
	'iodomain'
	name=ID
	('inherits' inherits+=[MIODomain|VersionedQualifiedName] ( "," inherits+=[MIODomain|VersionedQualifiedName])*  )?
	'{'
		(('version' ':=' version=Version ';')
		& ('languages' ':=' languages+=[system::MLanguage|VersionedQualifiedName] ("," languages+=[system::MLanguage|VersionedQualifiedName])* ';')?
		& ('singleton' 'instances' ':=' allowsSingleton=EBoolean ';')?
		& ('attributes' 
			'{' 
				(attributes+=MParameter)+
			'}' ';')?
		& ('interface' 'types' 
			'{' 
				(interfaceTypes+=MInterfaceType)+
			'}' ';')?
		& ('port' 'types' 
			'{' 
				(portTypes+=MPortType)+
			'}' ';')?
		& ('connectors' 
			'{' 
				(connectors+=MConnector)+
			'}' ';')?
		& ('exchange' 'models'
			'{'
				(exchangeModels+=MExchangeModel)+
			'}' ';')?
		& ('component' 'types' 
			'{' 
				(componentTypes+=MIODCType)+
			'}' ';')?
		& ('internal' 'instances'
		'{'
			(componentTypeInstances+=MIODComponentTypeInstance)+
		'}' ';')?
		& ('requires' ':=' requires+=[mclevsai::MSAI|VersionedQualifiedName] ( "," requires+=[mclevsai::MSAI|VersionedQualifiedName])* ';' )?
		& ('supported' 'platforms' 
			'{' 
				(supportedPlatforms+=MIODomainSupportedPlatform)+	
			'}' ';')?)
    '}' ';'
;

MIODomainSupportedPlatform returns MIODomainSupportedPlatform:
	'supported' 'platform'
	name=ID
	'{'
		(('osapi' ':=' ('any' | osapi=[pdl::MOperatingSystemAPI|VersionedQualifiedName]) ';')
		& ('os' ':=' ('any' | os=[pdl::MOperatingSystem|VersionedQualifiedName]) ';')
		& ('architecture' ':=' ('any' | architecture=[pdl::MArchitecture|VersionedQualifiedName]) ';')
		& ('compiler' ':=' compiler=[pdl::MCompiler|VersionedQualifiedName] ';')?
		& ('microprocessor' ':=' ('any' | microprocessor=[pdl::MMicroprocessor|VersionedQualifiedName]) ';')
		& ('board' ':=' ('any' | board=[pdl::MBoard|VersionedQualifiedName]) ';')
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';' )?
		& ('languages' ':=' languages+=[system::MLanguage|VersionedQualifiedName] ("," languages+=[system::MLanguage|VersionedQualifiedName])* ';')?
		& ('requires' ':=' requires+=[mclevsai::MSAI|VersionedQualifiedName] ( "," requires+=[mclevsai::MSAI|VersionedQualifiedName])* ';' )?)
    '}' ';';

MAODomain returns MAODomain:
	'aodomain'
	name=ID
	('inherits' inherits+=[MAODomain|VersionedQualifiedName] ( "," inherits+=[MAODomain|VersionedQualifiedName])*  )?
	'{'
		(('version' ':=' version=Version ';')
		& ('output' 'iodomains' ':=' outputIODomains+=[MIODomain|VersionedQualifiedName] ("," outputIODomains+=[MIODomain|VersionedQualifiedName])* ';')?
		& ('attributes' 
			'{' 
				(attributes+=MParameter)+
			'}' ';')?
		& ('interface' 'types' 
			'{' 
				(interfaceTypes+=MInterfaceType)+
			'}' ';')?
		& ('port' 'types' 
			'{' 
				(portTypes+=MPortType)+
			'}' ';')?
		& ('connectors' 
			'{' 
				(connectors+=MConnector)+
			'}' ';')?
		& ('component' 'types' 
			'{' 
				(componentTypes+=MAODComponentType)+
			'}' ';')?
		& ('internal' 'instances'
			'{'
				(componentTypeInstances+=MAODComponentTypeInstance)+
			'}' ';')?)
    '}' ';'
;

MInterfaceType returns MInterfaceType:
	'interface' 'type'
	name=ID
	('inherits' inherits+=[MInterfaceType|VersionedQualifiedReferenceName] ( "," inherits+=[MInterfaceType|VersionedQualifiedReferenceName])* )?
	'{'
	'}' ';'
;

MAODComponentType returns MAODComponentType:
	'component' 'type'
	name=ID
	('inherits' inherits+=[MAODComponentType|VersionedQualifiedReferenceName] ( "," inherits+=[MAODComponentType|VersionedQualifiedReferenceName])* )?
	'{'
		(('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('port' 'instances'
			'{'
				(portTypeInstances+=MPortTypeInstance)+
			'}' ';')?		
		& ('internal' 'instances'
			'{'
				(componentTypeInstances+=MAODComponentTypeInstance)+
			'}' ';')?)
    '}' ';'
;

MIODCType returns MIODAbstractComponentType:
	MIODAbstractComponentType | MIODComponentType
;

MIODAbstractComponentType returns MIODAbstractComponentType:
	'abstract' 'component' 'type'
	name=ID
	('inherits' inherits+=[MIODAbstractComponentType|VersionedQualifiedReferenceName] ( "," inherits+=[MIODAbstractComponentType|VersionedQualifiedReferenceName])* )?
	'{'
		(('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('port' 'instances'
		'{'
			(portTypeInstances+=MPortTypeInstance)+
		'}' ';')?		
		& ('internal' 'instances'
		'{'
			(componentTypeInstances+=MIODComponentTypeInstance)+
		'}' ';')?)
    '}' ';'
;


MIODComponentType returns MIODComponentType:
	'component' 'type'
	name=ID
	('inherits' inherits+=[MIODAbstractComponentType|VersionedQualifiedReferenceName] ( "," inherits+=[MIODAbstractComponentType|VersionedQualifiedReferenceName])* )?
	'{'
		(('language' ':=' language=[system::MLanguage|VersionedQualifiedName] ';')
		& ('attributes' 
			'{' 
				(attributes+=MParameter)+
			'}' ';')?
		& ('port' 'instances'
			'{'
				(portTypeInstances+=MPortTypeInstance)+
			'}' ';')?		
		& ('internal' 'instances'
		'{'
			(componentTypeInstances+=MIODComponentTypeInstance)+
		'}' ';')?)
    '}' ';';

MIODComponentTypeInstance returns MIODComponentTypeInstance:
	'type'
	componentType=[MIODAbstractComponentType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MAODComponentTypeInstance returns MAODComponentTypeInstance:
	'type'
	componentType=[MAODComponentType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MPortTypeInstance returns MPortTypeInstance:
	MExternalPortTypeInstance | MInternalPortTypeInstance
;

MExternalPortTypeInstance returns MExternalPortTypeInstance:
	MExternalClientPortTypeInstance | MExternalServerPortTypeInstance
;

MExternalClientPortTypeInstance returns MExternalClientPortTypeInstance:
	'external' 'client'
	portType=[MPortType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MExternalServerPortTypeInstance returns MExternalServerPortTypeInstance:
	'external' 'server'
	portType=[MPortType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MInternalPortTypeInstance returns MInternalPortTypeInstance:
	MInternalClientPortTypeInstance | MInternalServerPortTypeInstance
;

MInternalClientPortTypeInstance returns MInternalClientPortTypeInstance:
	'internal' 'client'
	portType=[MPortType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MInternalServerPortTypeInstance returns MInternalServerPortTypeInstance:
	'internal' 'server'
	portType=[MPortType|ID]
	'range' lowerBound=MParameterValueExpression 'to' upperBound=MParameterValueExpression
	';'
;

MPortType returns MPortType:
	{MPortType}
	'port' 'type'
	name=ID
	('inherits' inherits+=[MPortType|VersionedQualifiedReferenceName] ( "," inherits+=[MPortType|VersionedQualifiedReferenceName])* )?
	'{'
		(('interface' 'types' ':=' interfaceTypes+=[MInterfaceType|VersionedQualifiedReferenceName] ( "," interfaceTypes+=[MInterfaceType|VersionedQualifiedReferenceName])* ';')
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('client' 'attributes' 
		'{' 
			(clientAttributes+=MParameter)+
		'}' ';')?
		& ('server' 'attributes' 
		'{' 
			(serverAttributes+=MParameter)+
		'}' ';')?)
    '}' ';';


MExchangeModel returns MExchangeModel:
	{MExchangeModel}
	'exchange' 'model'
	name=ID
	('inherits' inherits+=[MExchangeModel|VersionedQualifiedReferenceName] ( "," inherits+=[MExchangeModel|VersionedQualifiedReferenceName])* )?
	'{'
		'interface' 'types' ':=' interfaceTypes+=[MInterfaceType|VersionedQualifiedReferenceName] "," interfaceTypes+=[MInterfaceType|VersionedQualifiedReferenceName] ( "," interfaceTypes+=[MInterfaceType|VersionedQualifiedReferenceName])* ';'
    '}' ';';

MConnector returns MConnector:
	'connector'
	name=ID
	('inherits' inherits+=[MConnector|VersionedQualifiedReferenceName] ( "," inherits+=[MConnector|VersionedQualifiedReferenceName])* )?
	'{'
		(('client' 'types' ':=' clientPortTypes+=[MPortType|VersionedQualifiedReferenceName] ( "," clientPortTypes+=[MPortType|VersionedQualifiedReferenceName])* ';')
		& ('server' 'types' ':=' serverPortTypes+=[MPortType|VersionedQualifiedReferenceName] ( "," serverPortTypes+=[MPortType|VersionedQualifiedReferenceName])* ';')
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';' )?)
    '}' ';';

MParameter returns common::MParameter:
	MIntegerParameterSingleExpression | MEnumParameterSingleExpression | 
	MBooleanParameterSingleExpression | MRealParameterSingleExpression |
	MStringParameterSingleExpression | MEnumParameterDefinition;

MIntegerParameterSingleExpression returns common::MIntegerParameterSingleExpression:
	(constant?='const')?
	'integer'
	name=ID
	':=' defaultValue=MParameterValueExpression
	('range' range=MParameterRange)?
    ';';

MEnumParameterDefinition returns common::MEnumParameterDefinition:
	{common::MEnumParameterDefinition}
	'enum'
	name=ID
	'{'
		literals+=MEnumParameterLiteralRule ("," literals+=MEnumParameterLiteralRule)*
    '}'
    ';';

MEnumParameterSingleExpression returns common::MEnumParameterSingleExpression:
	(constant?='const')?
	'enum'
	enumDefinition=[common::MEnumParameterDefinition|VersionedQualifiedReferenceName]
	name=ID
	':=' defaultValue=MParameterValueExpression
    ';';

MRealParameterSingleExpression returns common::MRealParameterSingleExpression:
	(constant?='const')?
	'real'
	name=ID
	':=' defaultValue=MParameterValueExpression
	('range' range=MParameterRange)?
    ';';

MEnumParameterLiteralRule returns common::MEnumParameterLiteral:
	MEnumParameterLiteral |
	MEnumParamIntegerLiteral |
	MEnumParamRealLiteral |
	MEnumParamStringLiteral
	;

MParameterValue returns common::MParameterValue:
	MParameterValueLiteral | MParameterValueRefObject |
	MParameterValuePAR
	;

MParameterValueLiteral returns common::MParameterValueLiteral:
	MParameterValueBooleanLiteral | MParameterValueStringLiteral |
	MParameterValueIntegerLiteral | MParameterValueRealLiteral
;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

REAL returns ecore::EString:
	'-'? (INT '.' INT) ('e' ('-')? INT)?;

MParameterValueBooleanLiteral returns common::MParameterValueBooleanLiteral:
	{common::MParameterValueBooleanLiteral}
	value=EBoolean;

MParameterValueStringLiteral returns common::MParameterValueStringLiteral:
	{common::MParameterValueStringLiteral}
	(isRaw?='raw')?
	value=STRING;

MParameterValueIntegerLiteral returns common::MParameterValueIntegerLiteral:
	{common::MParameterValueIntegerLiteral}
	value=INTEGER;

MParameterValueRealLiteral returns common::MParameterValueRealLiteral:
	{common::MParameterValueRealLiteral}
	value=REAL;


MParameterValueRefObject returns common::MParameterValueRefObject:
	{common::MParameterValueRefObject}
	object=[common::MCommonReferenceableObj|VersionedQualifiedReferenceName]
	;
	
MParameterValuePAR returns common::MParameterValuePAR:
	'(' value=MParameterValueExpression ')'
	;

enum MParameterValueExpressionOperators returns common::MParameterValueExpressionOperators:
	plus = '+' | minus = '-';

enum MParameterValueTERMOperators returns common::MParameterValueTERMOperators:
	mult = '*' | div = '/';
	
MParameterValueExpression returns common::MParameterValueExpression:
	{common::MParameterValueExpression}
	left=MParameterValueTERM (operation=MParameterValueExpressionOperators right=MParameterValueExpression)?
	;	

MParameterValueTERM returns common::MParameterValueTERM:
	{common::MParameterValueTERM}
	left=MParameterValue (operation=MParameterValueTERMOperators right=MParameterValueTERM)?
	;

MParameterRange returns common::MParameterRange:
	MParameterOCR | MParameterOOR |
	MParameterCOR | MParameterCCR;

MParameterOCR returns common::MParameterOCR:
	{common::MParameterOCR}
	'('
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	']'
	;

MParameterOOR returns common::MParameterOOR:
	{common::MParameterOOR}
	'('
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	')'
	;

MParameterCOR returns common::MParameterCOR:
	{common::MParameterCOR}
	'['
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	')'
	;

MParameterCCR returns common::MParameterCCR:
	{common::MParameterCCR}
	'['
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	']'
	;

MEnumParameterLiteral returns common::MEnumParameterLiteral:
	{common::MEnumParameterLiteral}
	name=ID
;

MEnumParamIntegerLiteral returns common::MEnumParamIntegerLiteral:
	{common::MEnumParamIntegerLiteral}
	name=ID
	'='
	value=INTEGER
;

MEnumParamRealLiteral returns common::MEnumParamRealLiteral:
	{common::MEnumParamRealLiteral}
	name=ID
	'='
	value=REAL
;

MEnumParamStringLiteral returns common::MEnumParamStringLiteral:
	{common::MEnumParamStringLiteral}
	name=ID
	'='
	(isRaw?='raw')?
	value=STRING
;

MBooleanParameterSingleExpression returns common::MBooleanParameterSingleExpression:
	(constant?='const')?
	'boolean'
	name=ID
	':=' defaultValue=MParameterValueExpression
	';';

MStringParameterSingleExpression returns common::MStringParameterSingleExpression:
	(constant?='const')?
	'string'
	name=ID
	':=' defaultValue=MParameterValueExpression
	';';
