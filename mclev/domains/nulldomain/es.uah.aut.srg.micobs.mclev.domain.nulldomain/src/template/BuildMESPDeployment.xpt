«REM»
/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT mespswi»
«IMPORT mespswp»
«IMPORT mclevmcad»
«IMPORT mclevslib»
«IMPORT mclevflatmcad»
«IMPORT pdl»
«IMPORT common»

«EXTENSION template::MICOBSUtil»
«EXTENSION template::NULLDomainUtil»
«EXTENSION template::NULLDomainStringHelper»
«EXTENSION template::GNUMakeUtil»
«EXTENSION template::LangC_C99»
«EXTENSION template::MCLEVUtil»
«EXTENSION template::MCLEVStringHelper»

«DEFINE main(MCommonPackage pack) FOR mclevflatmcad::MMCLEVFLATMCADPackageFile»
«LET ((MMCADeployment)((MFlatMCAD)this.element).referencedElement) AS deployment»
«FILE deployment.name.toLowerDefString() + ".mesp_dep" -»
package «pack.uri»;

import «getLanguageC_C99().getPackage().uri»;
«FOREACH this.imports.typeSelect(pdllibrary::MPDLPackage) AS pdlPackage -»
import «pdlPackage.uri»;
«ENDFOREACH -»
«IF deployment.deploymentAlternatives.isEmpty -»
«FOREACH {}.addAll(deployment.deploymentPlatforms.platform.getPlatformSwPackage().select(e|e != null).getPackage()).add(getConstructionToolGNUMake().getPackage()).add(getNULLDomainSwInterface().getPackage()).addAll(deployment.components.component.getSwPackageOfComponent().select(e|e != null).getPackage()).addAll(deployment.libraries.library.getSwPackageOfServiceLibrary().select(e|e != null).getPackage()).toSet().remove(pack) AS package -»
import «((MCommonPackage)package).uri»;
«ENDFOREACH -»
«ELSE -»
«FOREACH {}.addAll(deployment.deploymentPlatforms.platform.getPlatformSwPackage().select(e|e != null).getPackage()).add(getConstructionToolGNUMake().getPackage()).add(getNULLDomainSwInterface().getPackage()).addAll(deployment.getLeafDeploymentAlternatives().getAllServiceLibraryInstances().library.getSwPackageOfServiceLibrary().select(e|e != null).getPackage()).toSet().remove(pack) AS package -»
import «((MCommonPackage)package).uri»;
«ENDFOREACH -»
«ENDIF -»

deployment project «deployment.name»
{
	version := «deployment.version»;
	
	construction tool := «getConstructionToolGNUMake().getElementName()»;
	
	languages := «getLanguageC_C99().getElementName()»;
	
	required interfaces {
		
		requires «getNULLDomainSwInterface().getElementName()» {};
		
	};

	deployment platforms {

«FOREACH deployment.deploymentPlatforms AS deploymentPlatform -»
		deployment platform «deploymentPlatform.name» {

			platform := «deploymentPlatform.platform.getElementName()»;
«IF deploymentPlatform.platform.getPlatformSwPackage() != null -»
			pswpackage := «deploymentPlatform.platform.getPlatformSwPackage().getElementName()»;
«ELSE -»
			pswpackage := /* pswpacakge not installed */;
«ENDIF -»
«IF deploymentPlatform.parameterValueAssignments.isEmpty == false -»
			parameter values {
			
«FOREACH deploymentPlatform.parameterValueAssignments AS assignment -»
«EXPAND PrintValueAssignment(assignment.parameter.getPlatformParameterName(), "				") FOR assignment -»
«ENDFOREACH -»
			
			};
«ENDIF -»
«IF deploymentPlatform.deployedDevices.isEmpty == false -»
			deployed devices {
			
«FOREACH deploymentPlatform.deployedDevices AS deployedDevice -»
				device «deployedDevice.device.getElementName()» «deployedDevice.name» «IF deployedDevice.parameterValueAssignments.isEmpty == true -»{};«ELSE -»
				{
					
«FOREACH deployedDevice.parameterValueAssignments AS assignment -»
«EXPAND PrintValueAssignment(assignment.parameter.getRelativeObjectName(), "					") FOR assignment -»
«ENDFOREACH -»

				};
«ENDIF»
«ENDFOREACH -»

			};
«ENDIF -»

		};
«ENDFOREACH -»
	};

«IF deployment.deploymentAlternatives.isEmpty == false»
	deployment alternatives {
	
«FOREACH deployment.deploymentAlternatives AS deploymentAlternative -»
«EXPAND GenerateDeploymentAlternative("		") FOR deploymentAlternative -»

«ENDFOREACH -»
	};
«ENDIF -»
«IF deployment.libraries.isEmpty == false || deployment.components.isEmpty == false -»
	swpackages {

«FOREACH deployment.libraries AS library -»
«EXPAND GenerateSwPackageDeployment("		", null) FOR library -»	
«ENDFOREACH -»
«FOREACH deployment.components AS component -»
«EXPAND GenerateSwPackageDeployment("		", null) FOR component -»	
«ENDFOREACH -»

	};
«ENDIF -»

};
«ENDFILE»
«ENDLET»
«ENDDEFINE»


«DEFINE GenerateDeploymentAlternative(String indent) FOR mclevmcad::MDeploymentAlternative -»
«indent»deployment alternative «this.name» {
«indent»
«indent»	deployment platforms := «IF this.deploymentPlatforms.size == 1»«this.deploymentPlatforms.first().name»;«ELSE»«this.deploymentPlatforms.first().name»,
«FOREACH this.deploymentPlatforms.withoutFirst().withoutLast() AS platform -»
«indent»							«platform.name»,
«ENDFOREACH -»
«indent»							«this.deploymentPlatforms.last().name»;
«ENDIF -»	
«indent»
«IF this.deploymentAlternatives.isEmpty == false -»
«indent»	deployment alternatives {
«indent»
«FOREACH this.deploymentAlternatives AS deploymentAlternative -»
«EXPAND GenerateDeploymentAlternative(indent + "		") FOR deploymentAlternative -»
«indent»
«ENDFOREACH -»
«indent»	};
«indent»	
«ENDIF -»
«IF this.libraries.isEmpty == false || this.components.isEmpty == false -»
«indent»	swpackages {

«FOREACH this.libraries AS library -»
«EXPAND GenerateSwPackageDeployment(indent + "		", this) FOR library -»	
«ENDFOREACH -»
«FOREACH this.components AS component -»
«EXPAND GenerateSwPackageDeployment(indent + "		", null) FOR component -»	
«ENDFOREACH -»
«indent»
«indent»	};
«indent»
«ENDIF -»
«indent»};
«ENDDEFINE»

«DEFINE GenerateSwPackageDeployment(String indent, MDeploymentAlternative dalt) FOR mclevmcad::MServiceLibraryInstance -»
«IF this.metaType == MDriverSLibInstance -»
«IF ((MDriverServiceLibrary)this.library).getSwPackageOfDriverServiceLibrary() == null -»
«indent»driver unknown { }; // MDriverServiceLibrary «this.library.name»(«this.library.version»)
«ELSE -»
«LET ((MDriverServiceLibrary)this.library).getSwPackageOfDriverServiceLibrary() AS drvswp -»
«indent»driver «drvswp.name»(«drvswp.version») «IF this.attributeValueAssignments.isEmpty && ((MDriverSLibInstance)this).deviceDriverMappings.isEmpty -»{};«ELSE -»{
«indent»
«IF this.attributeValueAssignments.isEmpty == false -»
«indent»	parameter values {
«indent»	
«FOREACH this.attributeValueAssignments AS assignment -»
«EXPAND PrintValueAssignment(assignment.parameter.getParameterName(this.library), indent + "		") FOR assignment -»
«ENDFOREACH -»
«indent»
«indent»	};
«ENDIF -»
«IF ((MDriverSLibInstance)this).deviceDriverMappings.isEmpty == false -»
«indent»	device mappings {
«indent»	
«FOREACH ((MDriverSLibInstance)this).deviceDriverMappings AS devmap -»
«indent»		supported device «devmap.supportedDevice.getRelativeObjectName()» ->
«indent»		deployed device «devmap.deployedDevice.getRelativeObjectName()»;	
«ENDFOREACH -»
«indent»
«indent»	};
«ENDIF -»
«indent»
«indent»};«ENDIF»
«ENDLET -»
«ENDIF -»
«ELSE -»
«IF this.library.getSwPackageOfServiceLibrary() == null -»
«indent»swpackage unknown { }; // MServiceLibrary «this.library.name»(«this.library.version»)
«ELSE -»
«LET this.library.getSwPackageOfServiceLibrary() AS swp -»
«indent»swpackage «swp.name»(«swp.version») «IF this.attributeValueAssignments.isEmpty == true -»{};«ELSE -»{
«indent»
«FOREACH this.attributeValueAssignments AS assignment -»
«EXPAND PrintValueAssignment(assignment.parameter.getParameterName(this.library), indent + "	") FOR assignment -»
«ENDFOREACH -»
«indent»
«indent»};«ENDIF»
«ENDLET -»
«ENDIF -»
«ENDIF -»
«ENDDEFINE»

«DEFINE GenerateSwPackageDeployment(String indent, MDeploymentAlternative dalt) FOR mclevmcad::MComponentInstance -»
«IF this.component.getSwPackageOfComponent() == null -»
«indent»swpackage unknown { }; // MComponent «this.component.name»(«this.component.version») «this.name»
«ELSE -»
«LET this.component.getSwPackageOfComponent() AS swp -»
«indent»swpackage «swp.name»(«swp.version») «IF this.attributeValueAssignments.isEmpty == true -»{};«ELSE -»{
«indent»
«FOREACH this.attributeValueAssignments AS assignment -»
«EXPAND PrintValueAssignment(assignment.parameter.getParameterName(this.component), indent + "	") FOR assignment -»
«ENDFOREACH -»
«indent»
«indent»};«ENDIF»
«ENDLET -»
«ENDIF -»
«ENDDEFINE»

«DEFINE PrintValueAssignment(String name, String indent) FOR common::MParameterValueAssignment -»
«indent»parameter «name» := «EXPAND PrintExpression FOR this.getParameterValue() -»;
«ENDDEFINE»

«DEFINE PrintExpression FOR common::MParameterValueExpression -»
«EXPAND PrintParameterValueTERM FOR this.left -»«IF this.right != null -»«IF this.operation == MParameterValueExpressionOperators::plus -»+«ELSE -»-«ENDIF -»«EXPAND PrintExpression FOR this.right -»«ENDIF -»
«ENDDEFINE»

«DEFINE PrintParameterValueTERM FOR common::MParameterValueTERM -»
«EXPAND PrintParameterValue FOR this.left -»«IF this.right != null -»«IF this.operation == MParameterValueTERMOperators::mult -»*«ELSE -»/«ENDIF -»«EXPAND PrintParameterValueTERM FOR this.right -»«ENDIF -»
«ENDDEFINE»

«DEFINE PrintParameterValue FOR common::MParameterValue -»
«IF this.metaType == common::MParameterValueBooleanLiteral -»«((common::MParameterValueBooleanLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueStringLiteral -»"«((common::MParameterValueStringLiteral)this).value»"«ELSEIF this.metaType == common::MParameterValueIntegerLiteral -»«((common::MParameterValueIntegerLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueRealLiteral -»«((common::MParameterValueRealLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueRefObject -»«LET ((common::MParameterValueRefObject)this).object AS object -»«IF object.metaType == MEnumParameterLiteral -»«object.name»«ELSE -»«object.getFullObjectNameToElement()»«ENDIF -»«ENDLET -»«ENDIF -»
«ENDDEFINE»
