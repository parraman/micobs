/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
grammar es.uah.aut.srg.micobs.mclev.lang.CMP with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/mclev/mclevcmp" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://srg.aut.uah.es/micobs/mclev/mclevdom" as mclevdom
import "http://srg.aut.uah.es/micobs/mclev/mclevsai" as mclevsai
import "http://srg.aut.uah.es/micobs/system" as system
import "http://srg.aut.uah.es/micobs/pdl" as pdl
import "http://srg.aut.uah.es/micobs/mclev/mcleviface" as mcleviface
import "http://srg.aut.uah.es/micobs/mclev/mclevimap" as mclevimap
import "http://srg.aut.uah.es/micobs/common" as common
import "http://srg.aut.uah.es/micobs/mclev/library/mclevlibrary" as mclevlibrary

MMCLEVCMPPackageFile returns MMCLEVCMPPackageFile:
	'package' package=[mclevlibrary::MMCLEVPackage|QualifiedName] ';'
	('import' imports+=[common::MCommonPackage|QualifiedName] ';')*
	element=MMCLEVCMPPackageElement
    ;

MMCLEVCMPPackageElement returns MMCLEVCMPPackageElement:
	MAbstractComponent | MComponent;
	
QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

MPort returns MPort:
	MServerPort | MClientPort;

MInternalConnection returns MInternalConnection:
	MInternalComponentConnection | MInternalComponentPlatformSwitch;

MAbstractComponent returns MAbstractComponent:
	'abstract' 'component'
	domain=[mclevdom::MDomain|VersionedQualifiedName] '::'
	type=[mclevdom::MComponentType|VersionedQualifiedReferenceName]
	name=ID
	('inherits' inherits+=[MAbstractComponent|VersionedQualifiedName] ( "," inherits+=[MAbstractComponent|VersionedQualifiedName])*  )?
	'{'
		(('version' ':=' version=Version ';')
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('attribute' 'values' 
		'{' 
			(attributeValueAssignments+=MParameterValueAssignment)*
		'}' ';')?
		& ('external' 'ports' 
		'{' 
			(externalPorts+=MPort)+
		'}' ';')?)
    '}' ';';




MComponent returns MComponent:
	{MComponent}
	'component'
	domain=[mclevdom::MDomain|VersionedQualifiedName] '::'
	type=[mclevdom::MComponentType|VersionedQualifiedReferenceName]
	name=ID
	('inherits' inherits+=[MAbstractComponent|VersionedQualifiedName] ( "," inherits+=[MAbstractComponent|VersionedQualifiedName])*  )?
	'{'
		(('version' ':=' version=Version ';')
		& ('languages' ':=' languages+=[system::MLanguage|VersionedQualifiedName] ("," languages+=[system::MLanguage|VersionedQualifiedName])* ';')?
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('attribute' 'values' 
		'{' 
			(attributeValueAssignments+=MParameterValueAssignment)*
		'}' ';')?
		& ('external' 'ports' 
		'{' 
			(externalPorts+=MPort)+
		'}' ';')?
		& ('internal' 'ports' 
		'{' 
			(internalPorts+=MPort)+
		'}' ';')?
		& ('requires' ':=' requires+=[mclevsai::MSAI|VersionedQualifiedName] ( "," requires+=[mclevsai::MSAI|VersionedQualifiedName])* ';' )?
		& ('supported' 'platforms' 
		'{'
			(supportedPlatforms+=ComponentSupportedPlatform)+
		'}' ';')?		
		& ('subcomponent' 'instances' 
		'{' 
			(internalComponents+=MInternalComponentInstance)+
		'}' ';')?
		& ('connections' 
		'{' 
			(connections+=MInternalConnection)+
		'}' ';')?)
    '}' ';';

MInternalComponentInstance returns MInternalComponentInstance:
	(isSingleton?='singleton')?
	'instance'
	component=[MComponent|VersionedQualifiedName]
	name=ID
	'{'
		(attributeValueAssignments+=MParameterValueAssignment)*
    '}' ';';

MServerPort returns MServerPort:
	{MServerPort}
	'server'
	type=[mclevdom::MPortType|VersionedQualifiedReferenceName]
	interface=[mcleviface::MInterface|VersionedQualifiedName]
	name=ID
	'{'
		(attributeValueAssignments+=MParameterValueAssignment)*
    '}' ';';

MClientPort returns MClientPort:
	{MClientPort}
	'client'
	type=[mclevdom::MPortType|VersionedQualifiedReferenceName]
	interface=[mcleviface::MInterface|VersionedQualifiedName]
	name=ID
	'{'
		(attributeValueAssignments+=MParameterValueAssignment)*
    '}' ';';

MParameterValueAssignment returns common::MParameterValueAssignmentSingleExpression:
	'attribute'
	parameter=[common::MParameter|VersionedQualifiedReferenceName]
	':='
	parameterValue=MParameterValueExpression ';'
	;

MParameter returns common::MParameter:
	MIntegerParameterSingleExpression | MEnumParameterSingleExpression | 
	MBooleanParameterSingleExpression | MRealParameterSingleExpression |
	MStringParameterSingleExpression | MEnumParameterDefinition;

MIntegerParameterSingleExpression returns common::MIntegerParameterSingleExpression:
	(constant?='const')?
	'integer'
	name=ID
	':=' defaultValue=MParameterValueExpression
	('range' range=MParameterRange)?
    ';';

MEnumParameterDefinition returns common::MEnumParameterDefinition:
	{common::MEnumParameterDefinition}
	'enum'
	name=ID
	'{'
		literals+=MEnumParameterLiteralRule ("," literals+=MEnumParameterLiteralRule)*
    '}'
    ';';

MEnumParameterSingleExpression returns common::MEnumParameterSingleExpression:
	(constant?='const')?
	'enum'
	enumDefinition=[common::MEnumParameterDefinition|VersionedQualifiedReferenceName]
	name=ID
	':=' defaultValue=MParameterValueExpression
    ';';

MRealParameterSingleExpression returns common::MRealParameterSingleExpression:
	(constant?='const')?
	'real'
	name=ID
	':=' defaultValue=MParameterValueExpression
	('range' range=MParameterRange)?
    ';';

MEnumParameterLiteralRule returns common::MEnumParameterLiteral:
	MEnumParameterLiteral |
	MEnumParamIntegerLiteral |
	MEnumParamRealLiteral |
	MEnumParamStringLiteral
	;

MParameterValue returns common::MParameterValue:
	MParameterValueLiteral | MParameterValueRefObject |
	MParameterValuePAR
	;

MParameterValueLiteral returns common::MParameterValueLiteral:
	MParameterValueBooleanLiteral | MParameterValueStringLiteral |
	MParameterValueIntegerLiteral | MParameterValueRealLiteral
;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

REAL returns ecore::EString:
	'-'? (INT '.' INT) ('e' ('-')? INT)?;

MParameterValueBooleanLiteral returns common::MParameterValueBooleanLiteral:
	{common::MParameterValueBooleanLiteral}
	value=EBoolean;

MParameterValueStringLiteral returns common::MParameterValueStringLiteral:
	{common::MParameterValueStringLiteral}
	value=STRING;

MParameterValueIntegerLiteral returns common::MParameterValueIntegerLiteral:
	{common::MParameterValueIntegerLiteral}
	value=INTEGER;

MParameterValueRealLiteral returns common::MParameterValueRealLiteral:
	{common::MParameterValueRealLiteral}
	value=REAL;


MParameterValueRefObject returns common::MParameterValueRefObject:
	{common::MParameterValueRefObject}
	object=[common::MCommonReferenceableObj|VersionedQualifiedReferenceName]
	;
	
MParameterValuePAR returns common::MParameterValuePAR:
	'(' value=MParameterValueExpression ')'
	;

enum MParameterValueExpressionOperators returns common::MParameterValueExpressionOperators:
	plus = '+' | minus = '-';

enum MParameterValueTERMOperators returns common::MParameterValueTERMOperators:
	mult = '*' | div = '/';
	
MParameterValueExpression returns common::MParameterValueExpression:
	{common::MParameterValueExpression}
	left=MParameterValueTERM (operation=MParameterValueExpressionOperators right=MParameterValueExpression)?
	;	

MParameterValueTERM returns common::MParameterValueTERM:
	{common::MParameterValueTERM}
	left=MParameterValue (operation=MParameterValueTERMOperators right=MParameterValueTERM)?
	;

MParameterRange returns common::MParameterRange:
	MParameterOCR | MParameterOOR |
	MParameterCOR | MParameterCCR;

MParameterOCR returns common::MParameterOCR:
	{common::MParameterOCR}
	'('
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	']'
	;

MParameterOOR returns common::MParameterOOR:
	{common::MParameterOOR}
	'('
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	')'
	;

MParameterCOR returns common::MParameterCOR:
	{common::MParameterCOR}
	'['
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	')'
	;

MParameterCCR returns common::MParameterCCR:
	{common::MParameterCCR}
	'['
	lowerValue=MParameterValueExpression ','
	upperValue=MParameterValueExpression
	']'
	;

MEnumParameterLiteral returns common::MEnumParameterLiteral:
	{common::MEnumParameterLiteral}
	name=ID
;

MEnumParamIntegerLiteral returns common::MEnumParamIntegerLiteral:
	{common::MEnumParamIntegerLiteral}
	name=ID
	'='
	value=INTEGER
;

MEnumParamRealLiteral returns common::MEnumParamRealLiteral:
	{common::MEnumParamRealLiteral}
	name=ID
	'='
	value=REAL
;

MEnumParamStringLiteral returns common::MEnumParamStringLiteral:
	{common::MEnumParamStringLiteral}
	name=ID
	'='
	value=STRING
;

MBooleanParameterSingleExpression returns common::MBooleanParameterSingleExpression:
	(constant?='const')?
	'boolean'
	name=ID
	':=' defaultValue=MParameterValueExpression
	';';

MStringParameterSingleExpression returns common::MStringParameterSingleExpression:
	(constant?='const')?
	'string'
	name=ID
	':=' defaultValue=MParameterValueExpression
	';';

MInternalComponentConnection returns MInternalComponentConnection:
	{MInternalComponentConnection}
	'connection' 
	('this' | clientInstance=[MInternalComponentInstance|VersionedQualifiedReferenceName]) '.'
	clientPort=[MClientPort|ID] '<->' 
	('this' | serverInstance=[MInternalComponentInstance|VersionedQualifiedReferenceName]) '.'
	serverPort=[MServerPort|ID] ('using'
	connector=[mclevdom::MConnector|VersionedQualifiedReferenceName]
	'{' 
		('mapping' ':=' ifaceMapping=[mclevimap::MInterfaceMapping|VersionedQualifiedName] ';')?
		('attribute' attributeValueAssignments+=MParameterValueAssignment)*
    '}')? ';';

MInternalComponentPlatformSwitch returns MInternalComponentPlatformSwitch:
	{MInternalComponentPlatformSwitch}
	'connection'
	('this' | clientInstance=[MInternalComponentInstance|VersionedQualifiedReferenceName]) '.'
	clientPort=[MClientPort|ID] '<->' 
	'switch'
	'{'
		(cases+=MInternalComponentPlatformSwitchCase)+
    '}' ';';

MInternalComponentPlatformSwitchCase returns MInternalComponentPlatformSwitchCase:
	'case' platform=[MComponentSupportedPlatform|ID] ':' 
	('this' | serverInstance=[MInternalComponentInstance|ID]) '.'
	serverPort=[MServerPort|ID] ('using'
	connector=[mclevdom::MConnector|VersionedQualifiedReferenceName]
	'{'
		('mapping' ':=' ifaceMapping=[mclevimap::MInterfaceMapping|VersionedQualifiedName] ';')? 
		('attribute' attributeValueAssignments+=MParameterValueAssignment)*
    '}')? ';';

ComponentSupportedPlatform returns MComponentSupportedPlatform:
	{MComponentSupportedPlatform}
	'supported' 'platform'
	name=ID
	'{'
		(('osapi' ':=' ('any' | osapi=[pdl::MOperatingSystemAPI|VersionedQualifiedName]) ';')
		& ('os' ':=' ('any' | os=[pdl::MOperatingSystem|VersionedQualifiedName]) ';')
		& ('architecture' ':=' ('any' | architecture=[pdl::MArchitecture|VersionedQualifiedName]) ';')
		& ('compiler' ':=' compiler=[pdl::MCompiler|VersionedQualifiedName] ';')?
		& ('microprocessor' ':=' ('any' | microprocessor=[pdl::MMicroprocessor|VersionedQualifiedName]) ';')
		& ('board' ':=' ('any' | board=[pdl::MBoard|VersionedQualifiedName]) ';')
		& ('requires' ':=' requires+=[mclevsai::MSAI|VersionedQualifiedName] ( "," requires+=[mclevsai::MSAI|VersionedQualifiedName])* ';' )?
		& ('attribute' 'values' 
		'{' 
			(attributeValueAssignments+=MParameterValueAssignment)*
		'}' ';')?
		& ('attributes' 
		'{' 
			(attributes+=MParameter)+
		'}' ';')?
		& ('languages' ':=' languages+=[system::MLanguage|VersionedQualifiedName] ("," languages+=[system::MLanguage|VersionedQualifiedName])* ';')?
		& ('subcomponent' 'instances' 
		'{'
			(internalComponents+=MInternalComponentInstance)+
		'}' ';')?
		& ('connections' 
		'{' 
			(connections+=MInternalComponentConnection)+
		'}' ';')?)
    '}' ';';

    