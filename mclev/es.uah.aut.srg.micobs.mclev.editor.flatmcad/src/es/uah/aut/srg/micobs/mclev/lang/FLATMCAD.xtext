/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
grammar es.uah.aut.srg.micobs.mclev.lang.FLATMCAD with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/mclev/mclevflatmcad" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://srg.aut.uah.es/micobs/common" as common
import "http://srg.aut.uah.es/micobs/mclev/mclevmcad" as mclevmcad
import "http://srg.aut.uah.es/micobs/mclev/mclevslib" as mclevslib
import "http://srg.aut.uah.es/micobs/mclev/mclevcmp" as mclevcmp
import "http://srg.aut.uah.es/micobs/mclev/mclevdom" as mclevdom
import "http://srg.aut.uah.es/micobs/mclev/mclevimap" as mclevimap
import "http://srg.aut.uah.es/micobs/mclev/library/mclevlibrary" as mclevlibrary

MMCLEVFLATMCADPackageFile returns MMCLEVFLATMCADPackageFile:
	'package' package=[mclevlibrary::MMCLEVPackage|QualifiedName] ';'
	('import' imports+=[mclevlibrary::MMCLEVPackage|QualifiedName] ';')*
	element=MMCLEVFLATMCADPackageElement
;

MMCLEVFLATMCADPackageElement returns MMCLEVFLATMCADPackageElement:
	MFlatMCAD
	;

MFlatMCAD returns MFlatMCAD:
	'flat mcad'
	name=ID
	'{'
		(('version' ':=' version=Version ';')
		& ('deployment' 'project' ':=' referencedElement=[mclevmcad::MMCADeployment|VersionedQualifiedName] ';')
		& ('deployment' 'targets' '{'
			(targets+=MFlatMCADTarget)+
		'}' ';'))
    '}' ';';

MFlatMCADTarget returns MFlatMCADTarget:
	'target'
	(('platform' deploymentPlatform=[mclevmcad::MDeploymentPlatform])
	& ('alternative' leafDeploymentAlternative=[mclevmcad::MDeploymentAlternative|VersionedQualifiedReferenceName])?)
	'{'
		(('attribute' 'values'
		'{'
			(attributeValueAssignments+=MAttributeValueAssignment)+
		'}' ';')?
		& ('components' 
		'{' 
			(components+=MFlatComponentInstance)+
		'}' ';')?
		& ('connections' 
		'{' 
			(connections+=MFlatConnection)+
		'}' ';')?
		& ('libraries' 
		'{' 
			(libraries+=MFlatServiceLibraryInstance)+
		'}' ';')?)
	'}' ';'
;


QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

MFlatConnection returns MFlatConnection:
	{MFlatConnection}
	'connection' clientInstance=[MFlatComponentInstance|ID] '.'
	clientPort=[mclevcmp::MClientPort|ID] '<->'
	serverInstance=[MFlatComponentInstance|ID] '.'
	serverPort=[mclevcmp::MServerPort|ID] 'using'
	connector=[mclevdom::MConnector|VersionedQualifiedReferenceName]
	'{'
		('mapping' ':=' ifaceMapping=[mclevimap::MInterfaceMapping|VersionedQualifiedName] ';')?
		(attributeValueAssignments+=MAttributeValueAssignment)*
    '}' ';';


MFlatComponentInstance returns MFlatComponentInstance:
	{MFlatComponentInstance}
	'instance'
	component=[mclevcmp::MComponent|VersionedQualifiedName]
	name=ID
	'{'
		(attributeValueAssignments+=MAttributeValueAssignment)*
    '}' ';';

MFlatServiceLibraryInstance returns MFlatServiceLibraryInstance:
	MRegularFlatServiceLibraryInstance | MFlatDriverSLibInstance
;

MRegularFlatServiceLibraryInstance returns MFlatServiceLibraryInstance:
	'library'
	library=[mclevslib::MServiceLibrary|VersionedQualifiedName]
	'{'
		(attributeValueAssignments+=MAttributeValueAssignment)*
    '}' ';';

MFlatDriverSLibInstance returns MFlatDriverSLibInstance:
	{MFlatDriverSLibInstance}
	'driver'
	library=[mclevslib::MServiceLibrary|VersionedQualifiedName]
	'{'
		(('attribute' 'values'
		'{'
			(attributeValueAssignments+=MAttributeValueAssignment)+
		'}' ';')?
		& ('device' 'mappings' '{'
			(deviceDriverMappings+=MFlatDeviceDriverMapping)+
		'}' ';')?)
	'}' ';'
;

MFlatDeviceDriverMapping returns MFlatDeviceDriverMapping:
	'supported' 'device' supportedDevice=[mclevslib::MDriverSLibSupportedDevice|VersionedQualifiedReferenceName]
	'->'
	'deployed' 'device' deployedDevice=[mclevmcad::MDeployedDevice|VersionedQualifiedReferenceName] ';'
;


MAttributeValueAssignment returns common::MParameterValueAssignmentSingleExpression:
	'attribute'
	parameter=[common::MParameter|VersionedQualifiedReferenceName]
	':='
	parameterValue=MParameterValueExpression ';'
	;

MParameterValue returns common::MParameterValue:
	MParameterValueLiteral | MParameterValueRefObject |
	MParameterValuePAR
	;

MParameterValueLiteral returns common::MParameterValueLiteral:
	MParameterValueBooleanLiteral | MParameterValueStringLiteral |
	MParameterValueIntegerLiteral | MParameterValueRealLiteral
;

MParameterValueBooleanLiteral returns common::MParameterValueBooleanLiteral:
	{common::MParameterValueBooleanLiteral}
	value=EBoolean;

MParameterValueStringLiteral returns common::MParameterValueStringLiteral:
	{common::MParameterValueStringLiteral}
	value=STRING;

MParameterValueIntegerLiteral returns common::MParameterValueIntegerLiteral:
	{common::MParameterValueIntegerLiteral}
	value=INTEGER;

MParameterValueRealLiteral returns common::MParameterValueRealLiteral:
	{common::MParameterValueRealLiteral}
	value=REAL;


MParameterValueRefObject returns common::MParameterValueRefObject:
	{common::MParameterValueRefObject}
	object=[common::MCommonReferenceableObj|VersionedQualifiedReferenceName]
	;
	
MParameterValuePAR returns common::MParameterValuePAR:
	'(' value=MParameterValueExpression ')'
	;

enum MParameterValueExpressionOperators returns common::MParameterValueExpressionOperators:
	plus = '+' | minus = '-';

enum MParameterValueTERMOperators returns common::MParameterValueTERMOperators:
	mult = '*' | div = '/';
	
MParameterValueExpression returns common::MParameterValueExpression:
	{common::MParameterValueExpression}
	left=MParameterValueTERM (operation=MParameterValueExpressionOperators right=MParameterValueExpression)?
	;	

MParameterValueTERM returns common::MParameterValueTERM:
	{common::MParameterValueTERM}
	left=MParameterValue (operation=MParameterValueTERMOperators right=MParameterValueTERM)?
	;


EBoolean returns ecore::EBoolean:
	'true' | 'false';

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);

REAL returns ecore::EString:
	'-'? (INT '.' INT) ('e' ('-')? INT)?;
