/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mclev.mclevcmp.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mclev.mclevcmp.util.mclevcmpAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mclevcmpItemProviderAdapterFactory extends mclevcmpAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mclevcmpItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MComponent} instances.
	 * @generated
	 */
	protected MComponentItemProvider mComponentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MComponent}.
	 * @generated
	 */
	@Override
	public Adapter createMComponentAdapter() {
		if (mComponentItemProvider == null) {
			mComponentItemProvider = new MComponentItemProvider(this);
		}

		return mComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MAbstractComponent} instances.
	 * @generated
	 */
	protected MAbstractComponentItemProvider mAbstractComponentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MAbstractComponent}.
	 * @generated
	 */
	@Override
	public Adapter createMAbstractComponentAdapter() {
		if (mAbstractComponentItemProvider == null) {
			mAbstractComponentItemProvider = new MAbstractComponentItemProvider(this);
		}

		return mAbstractComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MComponentSupportedPlatform} instances.
	 * @generated
	 */
	protected MComponentSupportedPlatformItemProvider mComponentSupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MComponentSupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMComponentSupportedPlatformAdapter() {
		if (mComponentSupportedPlatformItemProvider == null) {
			mComponentSupportedPlatformItemProvider = new MComponentSupportedPlatformItemProvider(this);
		}

		return mComponentSupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentInstance} instances.
	 * @generated
	 */
	protected MInternalComponentInstanceItemProvider mInternalComponentInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalComponentInstanceAdapter() {
		if (mInternalComponentInstanceItemProvider == null) {
			mInternalComponentInstanceItemProvider = new MInternalComponentInstanceItemProvider(this);
		}

		return mInternalComponentInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MServerPort} instances.
	 * @generated
	 */
	protected MServerPortItemProvider mServerPortItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MServerPort}.
	 * @generated
	 */
	@Override
	public Adapter createMServerPortAdapter() {
		if (mServerPortItemProvider == null) {
			mServerPortItemProvider = new MServerPortItemProvider(this);
		}

		return mServerPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MClientPort} instances.
	 * @generated
	 */
	protected MClientPortItemProvider mClientPortItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MClientPort}.
	 * @generated
	 */
	@Override
	public Adapter createMClientPortAdapter() {
		if (mClientPortItemProvider == null) {
			mClientPortItemProvider = new MClientPortItemProvider(this);
		}

		return mClientPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentConnection} instances.
	 * @generated
	 */
	protected MInternalComponentConnectionItemProvider mInternalComponentConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentConnection}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalComponentConnectionAdapter() {
		if (mInternalComponentConnectionItemProvider == null) {
			mInternalComponentConnectionItemProvider = new MInternalComponentConnectionItemProvider(this);
		}

		return mInternalComponentConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentPlatformSwitch} instances.
	 * @generated
	 */
	protected MInternalComponentPlatformSwitchItemProvider mInternalComponentPlatformSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentPlatformSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalComponentPlatformSwitchAdapter() {
		if (mInternalComponentPlatformSwitchItemProvider == null) {
			mInternalComponentPlatformSwitchItemProvider = new MInternalComponentPlatformSwitchItemProvider(this);
		}

		return mInternalComponentPlatformSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentPlatformSwitchCase} instances.
	 * @generated
	 */
	protected MInternalComponentPlatformSwitchCaseItemProvider mInternalComponentPlatformSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MInternalComponentPlatformSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalComponentPlatformSwitchCaseAdapter() {
		if (mInternalComponentPlatformSwitchCaseItemProvider == null) {
			mInternalComponentPlatformSwitchCaseItemProvider = new MInternalComponentPlatformSwitchCaseItemProvider(this);
		}

		return mInternalComponentPlatformSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MMCLEVCMPPackageFile} instances.
	 * @generated
	 */
	protected MMCLEVCMPPackageFileItemProvider mmclevcmpPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MMCLEVCMPPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMCLEVCMPPackageFileAdapter() {
		if (mmclevcmpPackageFileItemProvider == null) {
			mmclevcmpPackageFileItemProvider = new MMCLEVCMPPackageFileItemProvider(this);
		}

		return mmclevcmpPackageFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MBooleanParamCSPSwitch} instances.
	 * @generated
	 */
	protected MBooleanParamCSPSwitchItemProvider mBooleanParamCSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MBooleanParamCSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamCSPSwitchAdapter() {
		if (mBooleanParamCSPSwitchItemProvider == null) {
			mBooleanParamCSPSwitchItemProvider = new MBooleanParamCSPSwitchItemProvider(this);
		}

		return mBooleanParamCSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MBooleanParamCSPSwitchCase} instances.
	 * @generated
	 */
	protected MBooleanParamCSPSwitchCaseItemProvider mBooleanParamCSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MBooleanParamCSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamCSPSwitchCaseAdapter() {
		if (mBooleanParamCSPSwitchCaseItemProvider == null) {
			mBooleanParamCSPSwitchCaseItemProvider = new MBooleanParamCSPSwitchCaseItemProvider(this);
		}

		return mBooleanParamCSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MStringParamCSPSwitch} instances.
	 * @generated
	 */
	protected MStringParamCSPSwitchItemProvider mStringParamCSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MStringParamCSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamCSPSwitchAdapter() {
		if (mStringParamCSPSwitchItemProvider == null) {
			mStringParamCSPSwitchItemProvider = new MStringParamCSPSwitchItemProvider(this);
		}

		return mStringParamCSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MStringParamCSPSwitchCase} instances.
	 * @generated
	 */
	protected MStringParamCSPSwitchCaseItemProvider mStringParamCSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MStringParamCSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamCSPSwitchCaseAdapter() {
		if (mStringParamCSPSwitchCaseItemProvider == null) {
			mStringParamCSPSwitchCaseItemProvider = new MStringParamCSPSwitchCaseItemProvider(this);
		}

		return mStringParamCSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MIntegerParamCSPSwitch} instances.
	 * @generated
	 */
	protected MIntegerParamCSPSwitchItemProvider mIntegerParamCSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MIntegerParamCSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamCSPSwitchAdapter() {
		if (mIntegerParamCSPSwitchItemProvider == null) {
			mIntegerParamCSPSwitchItemProvider = new MIntegerParamCSPSwitchItemProvider(this);
		}

		return mIntegerParamCSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MIntegerParamCSPSwitchCase} instances.
	 * @generated
	 */
	protected MIntegerParamCSPSwitchCaseItemProvider mIntegerParamCSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MIntegerParamCSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamCSPSwitchCaseAdapter() {
		if (mIntegerParamCSPSwitchCaseItemProvider == null) {
			mIntegerParamCSPSwitchCaseItemProvider = new MIntegerParamCSPSwitchCaseItemProvider(this);
		}

		return mIntegerParamCSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MEnumParamCSPSwitch} instances.
	 * @generated
	 */
	protected MEnumParamCSPSwitchItemProvider mEnumParamCSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MEnumParamCSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamCSPSwitchAdapter() {
		if (mEnumParamCSPSwitchItemProvider == null) {
			mEnumParamCSPSwitchItemProvider = new MEnumParamCSPSwitchItemProvider(this);
		}

		return mEnumParamCSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MEnumParamCSPSwitchCase} instances.
	 * @generated
	 */
	protected MEnumParamCSPSwitchCaseItemProvider mEnumParamCSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MEnumParamCSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamCSPSwitchCaseAdapter() {
		if (mEnumParamCSPSwitchCaseItemProvider == null) {
			mEnumParamCSPSwitchCaseItemProvider = new MEnumParamCSPSwitchCaseItemProvider(this);
		}

		return mEnumParamCSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MRealParamCSPSwitch} instances.
	 * @generated
	 */
	protected MRealParamCSPSwitchItemProvider mRealParamCSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MRealParamCSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamCSPSwitchAdapter() {
		if (mRealParamCSPSwitchItemProvider == null) {
			mRealParamCSPSwitchItemProvider = new MRealParamCSPSwitchItemProvider(this);
		}

		return mRealParamCSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MRealParamCSPSwitchCase} instances.
	 * @generated
	 */
	protected MRealParamCSPSwitchCaseItemProvider mRealParamCSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevcmp.MRealParamCSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamCSPSwitchCaseAdapter() {
		if (mRealParamCSPSwitchCaseItemProvider == null) {
			mRealParamCSPSwitchCaseItemProvider = new MRealParamCSPSwitchCaseItemProvider(this);
		}

		return mRealParamCSPSwitchCaseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mComponentItemProvider != null) mComponentItemProvider.dispose();
		if (mAbstractComponentItemProvider != null) mAbstractComponentItemProvider.dispose();
		if (mComponentSupportedPlatformItemProvider != null) mComponentSupportedPlatformItemProvider.dispose();
		if (mInternalComponentInstanceItemProvider != null) mInternalComponentInstanceItemProvider.dispose();
		if (mServerPortItemProvider != null) mServerPortItemProvider.dispose();
		if (mClientPortItemProvider != null) mClientPortItemProvider.dispose();
		if (mInternalComponentConnectionItemProvider != null) mInternalComponentConnectionItemProvider.dispose();
		if (mInternalComponentPlatformSwitchItemProvider != null) mInternalComponentPlatformSwitchItemProvider.dispose();
		if (mInternalComponentPlatformSwitchCaseItemProvider != null) mInternalComponentPlatformSwitchCaseItemProvider.dispose();
		if (mmclevcmpPackageFileItemProvider != null) mmclevcmpPackageFileItemProvider.dispose();
		if (mBooleanParamCSPSwitchItemProvider != null) mBooleanParamCSPSwitchItemProvider.dispose();
		if (mBooleanParamCSPSwitchCaseItemProvider != null) mBooleanParamCSPSwitchCaseItemProvider.dispose();
		if (mStringParamCSPSwitchItemProvider != null) mStringParamCSPSwitchItemProvider.dispose();
		if (mStringParamCSPSwitchCaseItemProvider != null) mStringParamCSPSwitchCaseItemProvider.dispose();
		if (mIntegerParamCSPSwitchItemProvider != null) mIntegerParamCSPSwitchItemProvider.dispose();
		if (mIntegerParamCSPSwitchCaseItemProvider != null) mIntegerParamCSPSwitchCaseItemProvider.dispose();
		if (mEnumParamCSPSwitchItemProvider != null) mEnumParamCSPSwitchItemProvider.dispose();
		if (mEnumParamCSPSwitchCaseItemProvider != null) mEnumParamCSPSwitchCaseItemProvider.dispose();
		if (mRealParamCSPSwitchItemProvider != null) mRealParamCSPSwitchItemProvider.dispose();
		if (mRealParamCSPSwitchCaseItemProvider != null) mRealParamCSPSwitchCaseItemProvider.dispose();
	}

}
