/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mclev.mclevdom.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mclev.mclevdom.util.mclevdomAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mclevdomItemProviderAdapterFactory extends mclevdomAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mclevdomItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODomain} instances.
	 * @generated
	 */
	protected MAODomainItemProvider maoDomainItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODomain}.
	 * @generated
	 */
	@Override
	public Adapter createMAODomainAdapter() {
		if (maoDomainItemProvider == null) {
			maoDomainItemProvider = new MAODomainItemProvider(this);
		}

		return maoDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODomain} instances.
	 * @generated
	 */
	protected MIODomainItemProvider mioDomainItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODomain}.
	 * @generated
	 */
	@Override
	public Adapter createMIODomainAdapter() {
		if (mioDomainItemProvider == null) {
			mioDomainItemProvider = new MIODomainItemProvider(this);
		}

		return mioDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODAbstractComponentType} instances.
	 * @generated
	 */
	protected MIODAbstractComponentTypeItemProvider miodAbstractComponentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODAbstractComponentType}.
	 * @generated
	 */
	@Override
	public Adapter createMIODAbstractComponentTypeAdapter() {
		if (miodAbstractComponentTypeItemProvider == null) {
			miodAbstractComponentTypeItemProvider = new MIODAbstractComponentTypeItemProvider(this);
		}

		return miodAbstractComponentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODComponentType} instances.
	 * @generated
	 */
	protected MIODComponentTypeItemProvider miodComponentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODComponentType}.
	 * @generated
	 */
	@Override
	public Adapter createMIODComponentTypeAdapter() {
		if (miodComponentTypeItemProvider == null) {
			miodComponentTypeItemProvider = new MIODComponentTypeItemProvider(this);
		}

		return miodComponentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODComponentType} instances.
	 * @generated
	 */
	protected MAODComponentTypeItemProvider maodComponentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODComponentType}.
	 * @generated
	 */
	@Override
	public Adapter createMAODComponentTypeAdapter() {
		if (maodComponentTypeItemProvider == null) {
			maodComponentTypeItemProvider = new MAODComponentTypeItemProvider(this);
		}

		return maodComponentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODComponentTypeInstance} instances.
	 * @generated
	 */
	protected MIODComponentTypeInstanceItemProvider miodComponentTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODComponentTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMIODComponentTypeInstanceAdapter() {
		if (miodComponentTypeInstanceItemProvider == null) {
			miodComponentTypeInstanceItemProvider = new MIODComponentTypeInstanceItemProvider(this);
		}

		return miodComponentTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODComponentTypeInstance} instances.
	 * @generated
	 */
	protected MAODComponentTypeInstanceItemProvider maodComponentTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MAODComponentTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMAODComponentTypeInstanceAdapter() {
		if (maodComponentTypeInstanceItemProvider == null) {
			maodComponentTypeInstanceItemProvider = new MAODComponentTypeInstanceItemProvider(this);
		}

		return maodComponentTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalPortTypeInstance} instances.
	 * @generated
	 */
	protected MInternalPortTypeInstanceItemProvider mInternalPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalPortTypeInstanceAdapter() {
		if (mInternalPortTypeInstanceItemProvider == null) {
			mInternalPortTypeInstanceItemProvider = new MInternalPortTypeInstanceItemProvider(this);
		}

		return mInternalPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalClientPortTypeInstance} instances.
	 * @generated
	 */
	protected MInternalClientPortTypeInstanceItemProvider mInternalClientPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalClientPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalClientPortTypeInstanceAdapter() {
		if (mInternalClientPortTypeInstanceItemProvider == null) {
			mInternalClientPortTypeInstanceItemProvider = new MInternalClientPortTypeInstanceItemProvider(this);
		}

		return mInternalClientPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalServerPortTypeInstance} instances.
	 * @generated
	 */
	protected MInternalServerPortTypeInstanceItemProvider mInternalServerPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInternalServerPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMInternalServerPortTypeInstanceAdapter() {
		if (mInternalServerPortTypeInstanceItemProvider == null) {
			mInternalServerPortTypeInstanceItemProvider = new MInternalServerPortTypeInstanceItemProvider(this);
		}

		return mInternalServerPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalPortTypeInstance} instances.
	 * @generated
	 */
	protected MExternalPortTypeInstanceItemProvider mExternalPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMExternalPortTypeInstanceAdapter() {
		if (mExternalPortTypeInstanceItemProvider == null) {
			mExternalPortTypeInstanceItemProvider = new MExternalPortTypeInstanceItemProvider(this);
		}

		return mExternalPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalClientPortTypeInstance} instances.
	 * @generated
	 */
	protected MExternalClientPortTypeInstanceItemProvider mExternalClientPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalClientPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMExternalClientPortTypeInstanceAdapter() {
		if (mExternalClientPortTypeInstanceItemProvider == null) {
			mExternalClientPortTypeInstanceItemProvider = new MExternalClientPortTypeInstanceItemProvider(this);
		}

		return mExternalClientPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalServerPortTypeInstance} instances.
	 * @generated
	 */
	protected MExternalServerPortTypeInstanceItemProvider mExternalServerPortTypeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExternalServerPortTypeInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMExternalServerPortTypeInstanceAdapter() {
		if (mExternalServerPortTypeInstanceItemProvider == null) {
			mExternalServerPortTypeInstanceItemProvider = new MExternalServerPortTypeInstanceItemProvider(this);
		}

		return mExternalServerPortTypeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MConnector} instances.
	 * @generated
	 */
	protected MConnectorItemProvider mConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MConnector}.
	 * @generated
	 */
	@Override
	public Adapter createMConnectorAdapter() {
		if (mConnectorItemProvider == null) {
			mConnectorItemProvider = new MConnectorItemProvider(this);
		}

		return mConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MPortType} instances.
	 * @generated
	 */
	protected MPortTypeItemProvider mPortTypeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MPortType}.
	 * @generated
	 */
	@Override
	public Adapter createMPortTypeAdapter() {
		if (mPortTypeItemProvider == null) {
			mPortTypeItemProvider = new MPortTypeItemProvider(this);
		}

		return mPortTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInterfaceType} instances.
	 * @generated
	 */
	protected MInterfaceTypeItemProvider mInterfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MInterfaceType}.
	 * @generated
	 */
	@Override
	public Adapter createMInterfaceTypeAdapter() {
		if (mInterfaceTypeItemProvider == null) {
			mInterfaceTypeItemProvider = new MInterfaceTypeItemProvider(this);
		}

		return mInterfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExchangeModel} instances.
	 * @generated
	 */
	protected MExchangeModelItemProvider mExchangeModelItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MExchangeModel}.
	 * @generated
	 */
	@Override
	public Adapter createMExchangeModelAdapter() {
		if (mExchangeModelItemProvider == null) {
			mExchangeModelItemProvider = new MExchangeModelItemProvider(this);
		}

		return mExchangeModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MMCLEVDOMPackageFile} instances.
	 * @generated
	 */
	protected MMCLEVDOMPackageFileItemProvider mmclevdomPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MMCLEVDOMPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMCLEVDOMPackageFileAdapter() {
		if (mmclevdomPackageFileItemProvider == null) {
			mmclevdomPackageFileItemProvider = new MMCLEVDOMPackageFileItemProvider(this);
		}

		return mmclevdomPackageFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODomainSupportedPlatform} instances.
	 * @generated
	 */
	protected MIODomainSupportedPlatformItemProvider mioDomainSupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIODomainSupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMIODomainSupportedPlatformAdapter() {
		if (mioDomainSupportedPlatformItemProvider == null) {
			mioDomainSupportedPlatformItemProvider = new MIODomainSupportedPlatformItemProvider(this);
		}

		return mioDomainSupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MBooleanParamIODSPSwitch} instances.
	 * @generated
	 */
	protected MBooleanParamIODSPSwitchItemProvider mBooleanParamIODSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MBooleanParamIODSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamIODSPSwitchAdapter() {
		if (mBooleanParamIODSPSwitchItemProvider == null) {
			mBooleanParamIODSPSwitchItemProvider = new MBooleanParamIODSPSwitchItemProvider(this);
		}

		return mBooleanParamIODSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MBooleanParamIODSPSwitchCase} instances.
	 * @generated
	 */
	protected MBooleanParamIODSPSwitchCaseItemProvider mBooleanParamIODSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MBooleanParamIODSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamIODSPSwitchCaseAdapter() {
		if (mBooleanParamIODSPSwitchCaseItemProvider == null) {
			mBooleanParamIODSPSwitchCaseItemProvider = new MBooleanParamIODSPSwitchCaseItemProvider(this);
		}

		return mBooleanParamIODSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MStringParamIODSPSwitch} instances.
	 * @generated
	 */
	protected MStringParamIODSPSwitchItemProvider mStringParamIODSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MStringParamIODSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamIODSPSwitchAdapter() {
		if (mStringParamIODSPSwitchItemProvider == null) {
			mStringParamIODSPSwitchItemProvider = new MStringParamIODSPSwitchItemProvider(this);
		}

		return mStringParamIODSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MStringParamIODSPSwitchCase} instances.
	 * @generated
	 */
	protected MStringParamIODSPSwitchCaseItemProvider mStringParamIODSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MStringParamIODSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamIODSPSwitchCaseAdapter() {
		if (mStringParamIODSPSwitchCaseItemProvider == null) {
			mStringParamIODSPSwitchCaseItemProvider = new MStringParamIODSPSwitchCaseItemProvider(this);
		}

		return mStringParamIODSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIntegerParamIODSPSwitch} instances.
	 * @generated
	 */
	protected MIntegerParamIODSPSwitchItemProvider mIntegerParamIODSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIntegerParamIODSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamIODSPSwitchAdapter() {
		if (mIntegerParamIODSPSwitchItemProvider == null) {
			mIntegerParamIODSPSwitchItemProvider = new MIntegerParamIODSPSwitchItemProvider(this);
		}

		return mIntegerParamIODSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIntegerParamIODSPSwitchCase} instances.
	 * @generated
	 */
	protected MIntegerParamIODSPSwitchCaseItemProvider mIntegerParamIODSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MIntegerParamIODSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamIODSPSwitchCaseAdapter() {
		if (mIntegerParamIODSPSwitchCaseItemProvider == null) {
			mIntegerParamIODSPSwitchCaseItemProvider = new MIntegerParamIODSPSwitchCaseItemProvider(this);
		}

		return mIntegerParamIODSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MEnumParamIODSPSwitch} instances.
	 * @generated
	 */
	protected MEnumParamIODSPSwitchItemProvider mEnumParamIODSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MEnumParamIODSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamIODSPSwitchAdapter() {
		if (mEnumParamIODSPSwitchItemProvider == null) {
			mEnumParamIODSPSwitchItemProvider = new MEnumParamIODSPSwitchItemProvider(this);
		}

		return mEnumParamIODSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MEnumParamIODSPSwitchCase} instances.
	 * @generated
	 */
	protected MEnumParamIODSPSwitchCaseItemProvider mEnumParamIODSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MEnumParamIODSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamIODSPSwitchCaseAdapter() {
		if (mEnumParamIODSPSwitchCaseItemProvider == null) {
			mEnumParamIODSPSwitchCaseItemProvider = new MEnumParamIODSPSwitchCaseItemProvider(this);
		}

		return mEnumParamIODSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MRealParamIODSPSwitch} instances.
	 * @generated
	 */
	protected MRealParamIODSPSwitchItemProvider mRealParamIODSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MRealParamIODSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamIODSPSwitchAdapter() {
		if (mRealParamIODSPSwitchItemProvider == null) {
			mRealParamIODSPSwitchItemProvider = new MRealParamIODSPSwitchItemProvider(this);
		}

		return mRealParamIODSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevdom.MRealParamIODSPSwitchCase} instances.
	 * @generated
	 */
	protected MRealParamIODSPSwitchCaseItemProvider mRealParamIODSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevdom.MRealParamIODSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamIODSPSwitchCaseAdapter() {
		if (mRealParamIODSPSwitchCaseItemProvider == null) {
			mRealParamIODSPSwitchCaseItemProvider = new MRealParamIODSPSwitchCaseItemProvider(this);
		}

		return mRealParamIODSPSwitchCaseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (maoDomainItemProvider != null) maoDomainItemProvider.dispose();
		if (mioDomainItemProvider != null) mioDomainItemProvider.dispose();
		if (miodAbstractComponentTypeItemProvider != null) miodAbstractComponentTypeItemProvider.dispose();
		if (miodComponentTypeItemProvider != null) miodComponentTypeItemProvider.dispose();
		if (maodComponentTypeItemProvider != null) maodComponentTypeItemProvider.dispose();
		if (miodComponentTypeInstanceItemProvider != null) miodComponentTypeInstanceItemProvider.dispose();
		if (maodComponentTypeInstanceItemProvider != null) maodComponentTypeInstanceItemProvider.dispose();
		if (mInternalPortTypeInstanceItemProvider != null) mInternalPortTypeInstanceItemProvider.dispose();
		if (mInternalClientPortTypeInstanceItemProvider != null) mInternalClientPortTypeInstanceItemProvider.dispose();
		if (mInternalServerPortTypeInstanceItemProvider != null) mInternalServerPortTypeInstanceItemProvider.dispose();
		if (mExternalPortTypeInstanceItemProvider != null) mExternalPortTypeInstanceItemProvider.dispose();
		if (mExternalClientPortTypeInstanceItemProvider != null) mExternalClientPortTypeInstanceItemProvider.dispose();
		if (mExternalServerPortTypeInstanceItemProvider != null) mExternalServerPortTypeInstanceItemProvider.dispose();
		if (mConnectorItemProvider != null) mConnectorItemProvider.dispose();
		if (mPortTypeItemProvider != null) mPortTypeItemProvider.dispose();
		if (mInterfaceTypeItemProvider != null) mInterfaceTypeItemProvider.dispose();
		if (mExchangeModelItemProvider != null) mExchangeModelItemProvider.dispose();
		if (mmclevdomPackageFileItemProvider != null) mmclevdomPackageFileItemProvider.dispose();
		if (mioDomainSupportedPlatformItemProvider != null) mioDomainSupportedPlatformItemProvider.dispose();
		if (mBooleanParamIODSPSwitchItemProvider != null) mBooleanParamIODSPSwitchItemProvider.dispose();
		if (mBooleanParamIODSPSwitchCaseItemProvider != null) mBooleanParamIODSPSwitchCaseItemProvider.dispose();
		if (mStringParamIODSPSwitchItemProvider != null) mStringParamIODSPSwitchItemProvider.dispose();
		if (mStringParamIODSPSwitchCaseItemProvider != null) mStringParamIODSPSwitchCaseItemProvider.dispose();
		if (mIntegerParamIODSPSwitchItemProvider != null) mIntegerParamIODSPSwitchItemProvider.dispose();
		if (mIntegerParamIODSPSwitchCaseItemProvider != null) mIntegerParamIODSPSwitchCaseItemProvider.dispose();
		if (mEnumParamIODSPSwitchItemProvider != null) mEnumParamIODSPSwitchItemProvider.dispose();
		if (mEnumParamIODSPSwitchCaseItemProvider != null) mEnumParamIODSPSwitchCaseItemProvider.dispose();
		if (mRealParamIODSPSwitchItemProvider != null) mRealParamIODSPSwitchItemProvider.dispose();
		if (mRealParamIODSPSwitchCaseItemProvider != null) mRealParamIODSPSwitchCaseItemProvider.dispose();
	}

}