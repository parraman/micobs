/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mclev.mclevslib.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mclev.mclevslib.util.mclevslibAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mclevslibItemProviderAdapterFactory extends mclevslibAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mclevslibItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibrary} instances.
	 * @generated
	 */
	protected MServiceLibraryItemProvider mServiceLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibrary}.
	 * @generated
	 */
	@Override
	public Adapter createMServiceLibraryAdapter() {
		if (mServiceLibraryItemProvider == null) {
			mServiceLibraryItemProvider = new MServiceLibraryItemProvider(this);
		}

		return mServiceLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibraryProvidedSAI} instances.
	 * @generated
	 */
	protected MServiceLibraryProvidedSAIItemProvider mServiceLibraryProvidedSAIItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibraryProvidedSAI}.
	 * @generated
	 */
	@Override
	public Adapter createMServiceLibraryProvidedSAIAdapter() {
		if (mServiceLibraryProvidedSAIItemProvider == null) {
			mServiceLibraryProvidedSAIItemProvider = new MServiceLibraryProvidedSAIItemProvider(this);
		}

		return mServiceLibraryProvidedSAIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVASwitch} instances.
	 * @generated
	 */
	protected MSLibProvidedSAIAVASwitchItemProvider msLibProvidedSAIAVASwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVASwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMSLibProvidedSAIAVASwitchAdapter() {
		if (msLibProvidedSAIAVASwitchItemProvider == null) {
			msLibProvidedSAIAVASwitchItemProvider = new MSLibProvidedSAIAVASwitchItemProvider(this);
		}

		return msLibProvidedSAIAVASwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVASwitchCase} instances.
	 * @generated
	 */
	protected MSLibProvidedSAIAVASwitchCaseItemProvider msLibProvidedSAIAVASwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVASwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMSLibProvidedSAIAVASwitchCaseAdapter() {
		if (msLibProvidedSAIAVASwitchCaseItemProvider == null) {
			msLibProvidedSAIAVASwitchCaseItemProvider = new MSLibProvidedSAIAVASwitchCaseItemProvider(this);
		}

		return msLibProvidedSAIAVASwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVAExpression} instances.
	 * @generated
	 */
	protected MSLibProvidedSAIAVAExpressionItemProvider msLibProvidedSAIAVAExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MSLibProvidedSAIAVAExpression}.
	 * @generated
	 */
	@Override
	public Adapter createMSLibProvidedSAIAVAExpressionAdapter() {
		if (msLibProvidedSAIAVAExpressionItemProvider == null) {
			msLibProvidedSAIAVAExpressionItemProvider = new MSLibProvidedSAIAVAExpressionItemProvider(this);
		}

		return msLibProvidedSAIAVAExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibrarySupportedPlatform} instances.
	 * @generated
	 */
	protected MServiceLibrarySupportedPlatformItemProvider mServiceLibrarySupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MServiceLibrarySupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMServiceLibrarySupportedPlatformAdapter() {
		if (mServiceLibrarySupportedPlatformItemProvider == null) {
			mServiceLibrarySupportedPlatformItemProvider = new MServiceLibrarySupportedPlatformItemProvider(this);
		}

		return mServiceLibrarySupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverSLibSupportedPlatform} instances.
	 * @generated
	 */
	protected MDriverSLibSupportedPlatformItemProvider mDriverSLibSupportedPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverSLibSupportedPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSLibSupportedPlatformAdapter() {
		if (mDriverSLibSupportedPlatformItemProvider == null) {
			mDriverSLibSupportedPlatformItemProvider = new MDriverSLibSupportedPlatformItemProvider(this);
		}

		return mDriverSLibSupportedPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverSLibSupportedDevice} instances.
	 * @generated
	 */
	protected MDriverSLibSupportedDeviceItemProvider mDriverSLibSupportedDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverSLibSupportedDevice}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSLibSupportedDeviceAdapter() {
		if (mDriverSLibSupportedDeviceItemProvider == null) {
			mDriverSLibSupportedDeviceItemProvider = new MDriverSLibSupportedDeviceItemProvider(this);
		}

		return mDriverSLibSupportedDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MAbstractServiceLibrary} instances.
	 * @generated
	 */
	protected MAbstractServiceLibraryItemProvider mAbstractServiceLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MAbstractServiceLibrary}.
	 * @generated
	 */
	@Override
	public Adapter createMAbstractServiceLibraryAdapter() {
		if (mAbstractServiceLibraryItemProvider == null) {
			mAbstractServiceLibraryItemProvider = new MAbstractServiceLibraryItemProvider(this);
		}

		return mAbstractServiceLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MMCLEVSLIBPackageFile} instances.
	 * @generated
	 */
	protected MMCLEVSLIBPackageFileItemProvider mmclevslibPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MMCLEVSLIBPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMCLEVSLIBPackageFileAdapter() {
		if (mmclevslibPackageFileItemProvider == null) {
			mmclevslibPackageFileItemProvider = new MMCLEVSLIBPackageFileItemProvider(this);
		}

		return mmclevslibPackageFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverServiceLibrary} instances.
	 * @generated
	 */
	protected MDriverServiceLibraryItemProvider mDriverServiceLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MDriverServiceLibrary}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverServiceLibraryAdapter() {
		if (mDriverServiceLibraryItemProvider == null) {
			mDriverServiceLibraryItemProvider = new MDriverServiceLibraryItemProvider(this);
		}

		return mDriverServiceLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MBooleanParamSLSPSwitch} instances.
	 * @generated
	 */
	protected MBooleanParamSLSPSwitchItemProvider mBooleanParamSLSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MBooleanParamSLSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamSLSPSwitchAdapter() {
		if (mBooleanParamSLSPSwitchItemProvider == null) {
			mBooleanParamSLSPSwitchItemProvider = new MBooleanParamSLSPSwitchItemProvider(this);
		}

		return mBooleanParamSLSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MBooleanParamSLSPSwitchCase} instances.
	 * @generated
	 */
	protected MBooleanParamSLSPSwitchCaseItemProvider mBooleanParamSLSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MBooleanParamSLSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMBooleanParamSLSPSwitchCaseAdapter() {
		if (mBooleanParamSLSPSwitchCaseItemProvider == null) {
			mBooleanParamSLSPSwitchCaseItemProvider = new MBooleanParamSLSPSwitchCaseItemProvider(this);
		}

		return mBooleanParamSLSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MStringParamSLSPSwitch} instances.
	 * @generated
	 */
	protected MStringParamSLSPSwitchItemProvider mStringParamSLSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MStringParamSLSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamSLSPSwitchAdapter() {
		if (mStringParamSLSPSwitchItemProvider == null) {
			mStringParamSLSPSwitchItemProvider = new MStringParamSLSPSwitchItemProvider(this);
		}

		return mStringParamSLSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MStringParamSLSPSwitchCase} instances.
	 * @generated
	 */
	protected MStringParamSLSPSwitchCaseItemProvider mStringParamSLSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MStringParamSLSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMStringParamSLSPSwitchCaseAdapter() {
		if (mStringParamSLSPSwitchCaseItemProvider == null) {
			mStringParamSLSPSwitchCaseItemProvider = new MStringParamSLSPSwitchCaseItemProvider(this);
		}

		return mStringParamSLSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MIntegerParamSLSPSwitch} instances.
	 * @generated
	 */
	protected MIntegerParamSLSPSwitchItemProvider mIntegerParamSLSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MIntegerParamSLSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamSLSPSwitchAdapter() {
		if (mIntegerParamSLSPSwitchItemProvider == null) {
			mIntegerParamSLSPSwitchItemProvider = new MIntegerParamSLSPSwitchItemProvider(this);
		}

		return mIntegerParamSLSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MIntegerParamSLSPSwitchCase} instances.
	 * @generated
	 */
	protected MIntegerParamSLSPSwitchCaseItemProvider mIntegerParamSLSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MIntegerParamSLSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMIntegerParamSLSPSwitchCaseAdapter() {
		if (mIntegerParamSLSPSwitchCaseItemProvider == null) {
			mIntegerParamSLSPSwitchCaseItemProvider = new MIntegerParamSLSPSwitchCaseItemProvider(this);
		}

		return mIntegerParamSLSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MEnumParamSLSPSwitch} instances.
	 * @generated
	 */
	protected MEnumParamSLSPSwitchItemProvider mEnumParamSLSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MEnumParamSLSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamSLSPSwitchAdapter() {
		if (mEnumParamSLSPSwitchItemProvider == null) {
			mEnumParamSLSPSwitchItemProvider = new MEnumParamSLSPSwitchItemProvider(this);
		}

		return mEnumParamSLSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MEnumParamSLSPSwitchCase} instances.
	 * @generated
	 */
	protected MEnumParamSLSPSwitchCaseItemProvider mEnumParamSLSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MEnumParamSLSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMEnumParamSLSPSwitchCaseAdapter() {
		if (mEnumParamSLSPSwitchCaseItemProvider == null) {
			mEnumParamSLSPSwitchCaseItemProvider = new MEnumParamSLSPSwitchCaseItemProvider(this);
		}

		return mEnumParamSLSPSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MRealParamSLSPSwitch} instances.
	 * @generated
	 */
	protected MRealParamSLSPSwitchItemProvider mRealParamSLSPSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MRealParamSLSPSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamSLSPSwitchAdapter() {
		if (mRealParamSLSPSwitchItemProvider == null) {
			mRealParamSLSPSwitchItemProvider = new MRealParamSLSPSwitchItemProvider(this);
		}

		return mRealParamSLSPSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevslib.MRealParamSLSPSwitchCase} instances.
	 * @generated
	 */
	protected MRealParamSLSPSwitchCaseItemProvider mRealParamSLSPSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevslib.MRealParamSLSPSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMRealParamSLSPSwitchCaseAdapter() {
		if (mRealParamSLSPSwitchCaseItemProvider == null) {
			mRealParamSLSPSwitchCaseItemProvider = new MRealParamSLSPSwitchCaseItemProvider(this);
		}

		return mRealParamSLSPSwitchCaseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mServiceLibraryItemProvider != null) mServiceLibraryItemProvider.dispose();
		if (mServiceLibraryProvidedSAIItemProvider != null) mServiceLibraryProvidedSAIItemProvider.dispose();
		if (msLibProvidedSAIAVASwitchItemProvider != null) msLibProvidedSAIAVASwitchItemProvider.dispose();
		if (msLibProvidedSAIAVASwitchCaseItemProvider != null) msLibProvidedSAIAVASwitchCaseItemProvider.dispose();
		if (msLibProvidedSAIAVAExpressionItemProvider != null) msLibProvidedSAIAVAExpressionItemProvider.dispose();
		if (mServiceLibrarySupportedPlatformItemProvider != null) mServiceLibrarySupportedPlatformItemProvider.dispose();
		if (mDriverSLibSupportedPlatformItemProvider != null) mDriverSLibSupportedPlatformItemProvider.dispose();
		if (mDriverSLibSupportedDeviceItemProvider != null) mDriverSLibSupportedDeviceItemProvider.dispose();
		if (mAbstractServiceLibraryItemProvider != null) mAbstractServiceLibraryItemProvider.dispose();
		if (mmclevslibPackageFileItemProvider != null) mmclevslibPackageFileItemProvider.dispose();
		if (mDriverServiceLibraryItemProvider != null) mDriverServiceLibraryItemProvider.dispose();
		if (mBooleanParamSLSPSwitchItemProvider != null) mBooleanParamSLSPSwitchItemProvider.dispose();
		if (mBooleanParamSLSPSwitchCaseItemProvider != null) mBooleanParamSLSPSwitchCaseItemProvider.dispose();
		if (mStringParamSLSPSwitchItemProvider != null) mStringParamSLSPSwitchItemProvider.dispose();
		if (mStringParamSLSPSwitchCaseItemProvider != null) mStringParamSLSPSwitchCaseItemProvider.dispose();
		if (mIntegerParamSLSPSwitchItemProvider != null) mIntegerParamSLSPSwitchItemProvider.dispose();
		if (mIntegerParamSLSPSwitchCaseItemProvider != null) mIntegerParamSLSPSwitchCaseItemProvider.dispose();
		if (mEnumParamSLSPSwitchItemProvider != null) mEnumParamSLSPSwitchItemProvider.dispose();
		if (mEnumParamSLSPSwitchCaseItemProvider != null) mEnumParamSLSPSwitchCaseItemProvider.dispose();
		if (mRealParamSLSPSwitchItemProvider != null) mRealParamSLSPSwitchItemProvider.dispose();
		if (mRealParamSLSPSwitchCaseItemProvider != null) mRealParamSLSPSwitchCaseItemProvider.dispose();
	}

}