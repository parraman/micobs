/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
package es.uah.aut.srg.micobs.mclev.mclevmcad.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import es.uah.aut.srg.micobs.mclev.mclevmcad.util.mclevmcadAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * @generated
 */
public class mclevmcadItemProviderAdapterFactory extends mclevmcadAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * @generated
	 */
	public mclevmcadItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MMCADeployment} instances.
	 * @generated
	 */
	protected MMCADeploymentItemProvider mmcaDeploymentItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MMCADeployment}.
	 * @generated
	 */
	@Override
	public Adapter createMMCADeploymentAdapter() {
		if (mmcaDeploymentItemProvider == null) {
			mmcaDeploymentItemProvider = new MMCADeploymentItemProvider(this);
		}

		return mmcaDeploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MServiceLibraryInstance} instances.
	 * @generated
	 */
	protected MServiceLibraryInstanceItemProvider mServiceLibraryInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MServiceLibraryInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMServiceLibraryInstanceAdapter() {
		if (mServiceLibraryInstanceItemProvider == null) {
			mServiceLibraryInstanceItemProvider = new MServiceLibraryInstanceItemProvider(this);
		}

		return mServiceLibraryInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDriverSLibInstance} instances.
	 * @generated
	 */
	protected MDriverSLibInstanceItemProvider mDriverSLibInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDriverSLibInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMDriverSLibInstanceAdapter() {
		if (mDriverSLibInstanceItemProvider == null) {
			mDriverSLibInstanceItemProvider = new MDriverSLibInstanceItemProvider(this);
		}

		return mDriverSLibInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeviceDriverMapping} instances.
	 * @generated
	 */
	protected MDeviceDriverMappingItemProvider mDeviceDriverMappingItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeviceDriverMapping}.
	 * @generated
	 */
	@Override
	public Adapter createMDeviceDriverMappingAdapter() {
		if (mDeviceDriverMappingItemProvider == null) {
			mDeviceDriverMappingItemProvider = new MDeviceDriverMappingItemProvider(this);
		}

		return mDeviceDriverMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MComponentInstance} instances.
	 * @generated
	 */
	protected MComponentInstanceItemProvider mComponentInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MComponentInstance}.
	 * @generated
	 */
	@Override
	public Adapter createMComponentInstanceAdapter() {
		if (mComponentInstanceItemProvider == null) {
			mComponentInstanceItemProvider = new MComponentInstanceItemProvider(this);
		}

		return mComponentInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeploymentAlternative} instances.
	 * @generated
	 */
	protected MDeploymentAlternativeItemProvider mDeploymentAlternativeItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeploymentAlternative}.
	 * @generated
	 */
	@Override
	public Adapter createMDeploymentAlternativeAdapter() {
		if (mDeploymentAlternativeItemProvider == null) {
			mDeploymentAlternativeItemProvider = new MDeploymentAlternativeItemProvider(this);
		}

		return mDeploymentAlternativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MCommonConnection} instances.
	 * @generated
	 */
	protected MCommonConnectionItemProvider mCommonConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MCommonConnection}.
	 * @generated
	 */
	@Override
	public Adapter createMCommonConnectionAdapter() {
		if (mCommonConnectionItemProvider == null) {
			mCommonConnectionItemProvider = new MCommonConnectionItemProvider(this);
		}

		return mCommonConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MConnectionSwitch} instances.
	 * @generated
	 */
	protected MConnectionSwitchItemProvider mConnectionSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MConnectionSwitch}.
	 * @generated
	 */
	@Override
	public Adapter createMConnectionSwitchAdapter() {
		if (mConnectionSwitchItemProvider == null) {
			mConnectionSwitchItemProvider = new MConnectionSwitchItemProvider(this);
		}

		return mConnectionSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MConnectionSwitchCase} instances.
	 * @generated
	 */
	protected MConnectionSwitchCaseItemProvider mConnectionSwitchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MConnectionSwitchCase}.
	 * @generated
	 */
	@Override
	public Adapter createMConnectionSwitchCaseAdapter() {
		if (mConnectionSwitchCaseItemProvider == null) {
			mConnectionSwitchCaseItemProvider = new MConnectionSwitchCaseItemProvider(this);
		}

		return mConnectionSwitchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeploymentPlatform} instances.
	 * @generated
	 */
	protected MDeploymentPlatformItemProvider mDeploymentPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeploymentPlatform}.
	 * @generated
	 */
	@Override
	public Adapter createMDeploymentPlatformAdapter() {
		if (mDeploymentPlatformItemProvider == null) {
			mDeploymentPlatformItemProvider = new MDeploymentPlatformItemProvider(this);
		}

		return mDeploymentPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeployedDevice} instances.
	 * @generated
	 */
	protected MDeployedDeviceItemProvider mDeployedDeviceItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MDeployedDevice}.
	 * @generated
	 */
	@Override
	public Adapter createMDeployedDeviceAdapter() {
		if (mDeployedDeviceItemProvider == null) {
			mDeployedDeviceItemProvider = new MDeployedDeviceItemProvider(this);
		}

		return mDeployedDeviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MMCLEVMCADPackageFile} instances.
	 * @generated
	 */
	protected MMCLEVMCADPackageFileItemProvider mmclevmcadPackageFileItemProvider;

	/**
	 * This creates an adapter for a {@link es.uah.aut.srg.micobs.mclev.mclevmcad.MMCLEVMCADPackageFile}.
	 * @generated
	 */
	@Override
	public Adapter createMMCLEVMCADPackageFileAdapter() {
		if (mmclevmcadPackageFileItemProvider == null) {
			mmclevmcadPackageFileItemProvider = new MMCLEVMCADPackageFileItemProvider(this);
		}

		return mmclevmcadPackageFileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * @generated
	 */
	public void dispose() {
		if (mmcaDeploymentItemProvider != null) mmcaDeploymentItemProvider.dispose();
		if (mServiceLibraryInstanceItemProvider != null) mServiceLibraryInstanceItemProvider.dispose();
		if (mDriverSLibInstanceItemProvider != null) mDriverSLibInstanceItemProvider.dispose();
		if (mDeviceDriverMappingItemProvider != null) mDeviceDriverMappingItemProvider.dispose();
		if (mComponentInstanceItemProvider != null) mComponentInstanceItemProvider.dispose();
		if (mDeploymentAlternativeItemProvider != null) mDeploymentAlternativeItemProvider.dispose();
		if (mCommonConnectionItemProvider != null) mCommonConnectionItemProvider.dispose();
		if (mConnectionSwitchItemProvider != null) mConnectionSwitchItemProvider.dispose();
		if (mConnectionSwitchCaseItemProvider != null) mConnectionSwitchCaseItemProvider.dispose();
		if (mDeploymentPlatformItemProvider != null) mDeploymentPlatformItemProvider.dispose();
		if (mDeployedDeviceItemProvider != null) mDeployedDeviceItemProvider.dispose();
		if (mmclevmcadPackageFileItemProvider != null) mmclevmcadPackageFileItemProvider.dispose();
	}

}