«REM»
/*******************************************************************************
 * Copyright (c) 2013-2015 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     MICOBS SRG Team - Initial API and implementation
 ******************************************************************************/
«ENDREM»
«IMPORT mclevflatmcad»
«IMPORT mclevmcad»
«IMPORT mclevdom»
«IMPORT common»

«EXTENSION template::MCLEVStringHelper»
«EXTENSION template::MCLEVUtil»

«DEFINE main FOR MMCLEVFLATMCADPackageFile»
«LET (MFlatMCAD)this.element AS flatmcad»
«FILE flatmcad.name.toLowerDefString() + ".mclev_flatmcad"»
package «this.package.uri»;

«FOREACH this.imports AS imp -»
import «imp.uri»;
«ENDFOREACH -»

flat mcad «flatmcad.name»
{
	version := «flatmcad.version»;
	
	deployment project := «flatmcad.referencedElement.getElementName()»;
	
	deployment targets {
	
«EXPAND GenerateTarget(((MMCADeployment)flatmcad.referencedElement).domain) FOREACH flatmcad.targets -»	
	};
};
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE GenerateTarget(MDomain domain) FOR MFlatMCADTarget»
		target platform «this.deploymentPlatform.name»«IF this.leafDeploymentAlternative != null -» alternative «this.leafDeploymentAlternative.getRelativeObjectName()»«ENDIF -» {

«IF this.attributeValueAssignments.isEmpty == false -»
			attribute values {

«FOREACH this.attributeValueAssignments AS pva -»
«EXPAND PrintValueAssignment(pva.parameter.getParameterName(domain), "					") FOR pva -»
«ENDFOREACH -»

			};
«ENDIF -»
«IF this.components.isEmpty == false -»
			components {

«FOREACH this.components AS inst -»
				instance «inst.component.getElementName()» «inst.name» «IF inst.attributeValueAssignments.isEmpty -»{};«ELSE -»{

«FOREACH inst.attributeValueAssignments AS pva -»
«EXPAND PrintValueAssignment(pva.parameter.getParameterName(inst.component), "					") FOR pva -»
«ENDFOREACH -»

				};«ENDIF»
«ENDFOREACH -»
			};
«ENDIF -»
«IF this.libraries.isEmpty == false -»

			libraries {

«FOREACH this.libraries.select(e|e.metaType != MFlatDriverSLibInstance) AS libinst -»
				library «libinst.library.getElementName()» «IF libinst.attributeValueAssignments.isEmpty -»{};«ELSE -»{

«FOREACH libinst.attributeValueAssignments AS pva -»
«EXPAND PrintValueAssignment(pva.parameter.getParameterName(libinst.library), "					") FOR pva -»
«ENDFOREACH -»

				};«ENDIF»
«ENDFOREACH -»
«FOREACH this.libraries.typeSelect(MFlatDriverSLibInstance) AS drvinst -»
				driver «drvinst.library.getElementName()» «IF drvinst.deviceDriverMappings.isEmpty && drvinst.deviceDriverMappings.isEmpty -»{};«ELSE -»{

«IF drvinst.attributeValueAssignments.isEmpty == false -»
					attribute values {

«FOREACH drvinst.attributeValueAssignments AS pva -»
«EXPAND PrintValueAssignment(pva.parameter.getParameterName(drvinst.library), "						") FOR pva -»
«ENDFOREACH -»

					};
«ENDIF -»
«IF drvinst.deviceDriverMappings.isEmpty == false -»
					device mappings {
					
«FOREACH drvinst.deviceDriverMappings AS devmap -»
						supported device «devmap.supportedDevice.getRelativeObjectName()»
						-> deployed device «devmap.deployedDevice.getRelativeObjectName()»;

«ENDFOREACH -»
					};
«ENDIF -»

				};«ENDIF»
«ENDFOREACH -»
			};
«ENDIF -»
«IF this.connections.isEmpty == false -»
			connections {

«FOREACH this.connections AS connection -»
				connection «connection.clientInstance.name».«connection.clientPort.name» <->
						   «connection.serverInstance.name».«connection.serverPort.name» 
						   using «connection.connector.getConnectorName(domain)» «IF connection.ifaceMapping == null && connection.attributeValueAssignments.isEmpty -»{};«ELSE -»{

«IF connection.ifaceMapping != null -»
					mapping := «connection.ifaceMapping.getElementName()»;

«ENDIF -»
«FOREACH connection.attributeValueAssignments AS pva -»
«EXPAND PrintValueAssignment(pva.parameter.getParameterName(connection.connector), "					") FOR pva -»
«ENDFOREACH -»

				};«ENDIF»
«ENDFOREACH -»
			};	
«ENDIF -»
		};
«ENDDEFINE»

«DEFINE PrintValueAssignment(String name, String indent) FOR common::MParameterValueAssignment -»
«indent»attribute «name» := «EXPAND PrintExpression FOR this.getParameterValue() -»;
«ENDDEFINE»

«DEFINE PrintExpression FOR common::MParameterValueExpression -»
«EXPAND PrintParameterValueTERM FOR this.left -»«IF this.right != null -»«IF this.operation == MParameterValueExpressionOperators::plus -»+«ELSE -»-«ENDIF -»«EXPAND PrintExpression FOR this.right -»«ENDIF -»
«ENDDEFINE»

«DEFINE PrintParameterValueTERM FOR common::MParameterValueTERM -»
«EXPAND PrintParameterValue FOR this.left -»«IF this.right != null -»«IF this.operation == MParameterValueTERMOperators::mult -»*«ELSE -»/«ENDIF -»«EXPAND PrintParameterValueTERM FOR this.right -»«ENDIF -»
«ENDDEFINE»

«DEFINE PrintParameterValue FOR common::MParameterValue -»
«IF this.metaType == common::MParameterValuePAR -»(«EXPAND PrintExpression FOR ((common::MParameterValuePAR)this).value»)«ELSEIF this.metaType == common::MParameterValueBooleanLiteral -»«((common::MParameterValueBooleanLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueStringLiteral -»"«((common::MParameterValueStringLiteral)this).value»"«ELSEIF this.metaType == common::MParameterValueIntegerLiteral -»«((common::MParameterValueIntegerLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueRealLiteral -»«((common::MParameterValueRealLiteral)this).value.toString()»«ELSEIF this.metaType == common::MParameterValueRefObject -»«LET ((common::MParameterValueRefObject)this).object AS object -»«IF object.metaType == MEnumParameterLiteral -»«object.name»«ELSE -»«object.getFullObjectNameToElement()»«ENDIF -»«ENDLET -»«ENDIF -»
«ENDDEFINE»